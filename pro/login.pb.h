// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: login.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_login_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_login_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3020000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3020001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_login_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_login_2eproto {
  static const uint32_t offsets[];
};
namespace message {
class CpeNodeChangeNotify;
struct CpeNodeChangeNotifyDefaultTypeInternal;
extern CpeNodeChangeNotifyDefaultTypeInternal _CpeNodeChangeNotify_default_instance_;
class Login;
struct LoginDefaultTypeInternal;
extern LoginDefaultTypeInternal _Login_default_instance_;
class LoginRes;
struct LoginResDefaultTypeInternal;
extern LoginResDefaultTypeInternal _LoginRes_default_instance_;
class NetInfo;
struct NetInfoDefaultTypeInternal;
extern NetInfoDefaultTypeInternal _NetInfo_default_instance_;
class NodeInfoList;
struct NodeInfoListDefaultTypeInternal;
extern NodeInfoListDefaultTypeInternal _NodeInfoList_default_instance_;
}  // namespace message
PROTOBUF_NAMESPACE_OPEN
template<> ::message::CpeNodeChangeNotify* Arena::CreateMaybeMessage<::message::CpeNodeChangeNotify>(Arena*);
template<> ::message::Login* Arena::CreateMaybeMessage<::message::Login>(Arena*);
template<> ::message::LoginRes* Arena::CreateMaybeMessage<::message::LoginRes>(Arena*);
template<> ::message::NetInfo* Arena::CreateMaybeMessage<::message::NetInfo>(Arena*);
template<> ::message::NodeInfoList* Arena::CreateMaybeMessage<::message::NodeInfoList>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace message {

// ===================================================================

class NetInfo final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:message.NetInfo) */ {
 public:
  inline NetInfo() : NetInfo(nullptr) {}
  ~NetInfo() override;
  explicit PROTOBUF_CONSTEXPR NetInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  NetInfo(const NetInfo& from);
  NetInfo(NetInfo&& from) noexcept
    : NetInfo() {
    *this = ::std::move(from);
  }

  inline NetInfo& operator=(const NetInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline NetInfo& operator=(NetInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const NetInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const NetInfo* internal_default_instance() {
    return reinterpret_cast<const NetInfo*>(
               &_NetInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(NetInfo& a, NetInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(NetInfo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(NetInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  NetInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<NetInfo>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const NetInfo& from);
  void MergeFrom(const NetInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(NetInfo* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "message.NetInfo";
  }
  protected:
  explicit NetInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVirtualIpFieldNumber = 2,
    kSubnetIpStartFieldNumber = 3,
    kMacAddrFieldNumber = 5,
    kMetaFieldNumber = 6,
    kNodeIdFieldNumber = 1,
    kNetMaskFieldNumber = 4,
  };
  // bytes virtual_ip = 2;
  void clear_virtual_ip();
  const std::string& virtual_ip() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_virtual_ip(ArgT0&& arg0, ArgT... args);
  std::string* mutable_virtual_ip();
  PROTOBUF_NODISCARD std::string* release_virtual_ip();
  void set_allocated_virtual_ip(std::string* virtual_ip);
  private:
  const std::string& _internal_virtual_ip() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_virtual_ip(const std::string& value);
  std::string* _internal_mutable_virtual_ip();
  public:

  // bytes subnet_ip_start = 3;
  void clear_subnet_ip_start();
  const std::string& subnet_ip_start() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_subnet_ip_start(ArgT0&& arg0, ArgT... args);
  std::string* mutable_subnet_ip_start();
  PROTOBUF_NODISCARD std::string* release_subnet_ip_start();
  void set_allocated_subnet_ip_start(std::string* subnet_ip_start);
  private:
  const std::string& _internal_subnet_ip_start() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_subnet_ip_start(const std::string& value);
  std::string* _internal_mutable_subnet_ip_start();
  public:

  // bytes mac_addr = 5;
  void clear_mac_addr();
  const std::string& mac_addr() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_mac_addr(ArgT0&& arg0, ArgT... args);
  std::string* mutable_mac_addr();
  PROTOBUF_NODISCARD std::string* release_mac_addr();
  void set_allocated_mac_addr(std::string* mac_addr);
  private:
  const std::string& _internal_mac_addr() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_mac_addr(const std::string& value);
  std::string* _internal_mutable_mac_addr();
  public:

  // bytes meta = 6;
  void clear_meta();
  const std::string& meta() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_meta(ArgT0&& arg0, ArgT... args);
  std::string* mutable_meta();
  PROTOBUF_NODISCARD std::string* release_meta();
  void set_allocated_meta(std::string* meta);
  private:
  const std::string& _internal_meta() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_meta(const std::string& value);
  std::string* _internal_mutable_meta();
  public:

  // int32 node_id = 1;
  void clear_node_id();
  int32_t node_id() const;
  void set_node_id(int32_t value);
  private:
  int32_t _internal_node_id() const;
  void _internal_set_node_id(int32_t value);
  public:

  // int32 net_mask = 4;
  void clear_net_mask();
  int32_t net_mask() const;
  void set_net_mask(int32_t value);
  private:
  int32_t _internal_net_mask() const;
  void _internal_set_net_mask(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:message.NetInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr virtual_ip_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr subnet_ip_start_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr mac_addr_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr meta_;
    int32_t node_id_;
    int32_t net_mask_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_login_2eproto;
};
// -------------------------------------------------------------------

class NodeInfoList final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:message.NodeInfoList) */ {
 public:
  inline NodeInfoList() : NodeInfoList(nullptr) {}
  ~NodeInfoList() override;
  explicit PROTOBUF_CONSTEXPR NodeInfoList(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  NodeInfoList(const NodeInfoList& from);
  NodeInfoList(NodeInfoList&& from) noexcept
    : NodeInfoList() {
    *this = ::std::move(from);
  }

  inline NodeInfoList& operator=(const NodeInfoList& from) {
    CopyFrom(from);
    return *this;
  }
  inline NodeInfoList& operator=(NodeInfoList&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const NodeInfoList& default_instance() {
    return *internal_default_instance();
  }
  static inline const NodeInfoList* internal_default_instance() {
    return reinterpret_cast<const NodeInfoList*>(
               &_NodeInfoList_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(NodeInfoList& a, NodeInfoList& b) {
    a.Swap(&b);
  }
  inline void Swap(NodeInfoList* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(NodeInfoList* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  NodeInfoList* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<NodeInfoList>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const NodeInfoList& from);
  void MergeFrom(const NodeInfoList& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(NodeInfoList* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "message.NodeInfoList";
  }
  protected:
  explicit NodeInfoList(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCpeListFieldNumber = 1,
  };
  // repeated .message.NetInfo cpe_list = 1;
  int cpe_list_size() const;
  private:
  int _internal_cpe_list_size() const;
  public:
  void clear_cpe_list();
  ::message::NetInfo* mutable_cpe_list(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::message::NetInfo >*
      mutable_cpe_list();
  private:
  const ::message::NetInfo& _internal_cpe_list(int index) const;
  ::message::NetInfo* _internal_add_cpe_list();
  public:
  const ::message::NetInfo& cpe_list(int index) const;
  ::message::NetInfo* add_cpe_list();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::message::NetInfo >&
      cpe_list() const;

  // @@protoc_insertion_point(class_scope:message.NodeInfoList)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::message::NetInfo > cpe_list_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_login_2eproto;
};
// -------------------------------------------------------------------

class Login final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:message.Login) */ {
 public:
  inline Login() : Login(nullptr) {}
  ~Login() override;
  explicit PROTOBUF_CONSTEXPR Login(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Login(const Login& from);
  Login(Login&& from) noexcept
    : Login() {
    *this = ::std::move(from);
  }

  inline Login& operator=(const Login& from) {
    CopyFrom(from);
    return *this;
  }
  inline Login& operator=(Login&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const Login& default_instance() {
    return *internal_default_instance();
  }
  static inline const Login* internal_default_instance() {
    return reinterpret_cast<const Login*>(
               &_Login_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(Login& a, Login& b) {
    a.Swap(&b);
  }
  inline void Swap(Login* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Login* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Login* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Login>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const Login& from);
  void MergeFrom(const Login& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Login* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "message.Login";
  }
  protected:
  explicit Login(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUidFieldNumber = 1,
    kTokenFieldNumber = 2,
    kVenderFieldNumber = 4,
    kMetaFieldNumber = 5,
    kNetinfoFieldNumber = 3,
  };
  // bytes uid = 1;
  void clear_uid();
  const std::string& uid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_uid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_uid();
  PROTOBUF_NODISCARD std::string* release_uid();
  void set_allocated_uid(std::string* uid);
  private:
  const std::string& _internal_uid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_uid(const std::string& value);
  std::string* _internal_mutable_uid();
  public:

  // bytes token = 2;
  void clear_token();
  const std::string& token() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_token(ArgT0&& arg0, ArgT... args);
  std::string* mutable_token();
  PROTOBUF_NODISCARD std::string* release_token();
  void set_allocated_token(std::string* token);
  private:
  const std::string& _internal_token() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_token(const std::string& value);
  std::string* _internal_mutable_token();
  public:

  // bytes vender = 4;
  void clear_vender();
  const std::string& vender() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_vender(ArgT0&& arg0, ArgT... args);
  std::string* mutable_vender();
  PROTOBUF_NODISCARD std::string* release_vender();
  void set_allocated_vender(std::string* vender);
  private:
  const std::string& _internal_vender() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_vender(const std::string& value);
  std::string* _internal_mutable_vender();
  public:

  // bytes meta = 5;
  void clear_meta();
  const std::string& meta() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_meta(ArgT0&& arg0, ArgT... args);
  std::string* mutable_meta();
  PROTOBUF_NODISCARD std::string* release_meta();
  void set_allocated_meta(std::string* meta);
  private:
  const std::string& _internal_meta() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_meta(const std::string& value);
  std::string* _internal_mutable_meta();
  public:

  // .message.NetInfo netinfo = 3;
  bool has_netinfo() const;
  private:
  bool _internal_has_netinfo() const;
  public:
  void clear_netinfo();
  const ::message::NetInfo& netinfo() const;
  PROTOBUF_NODISCARD ::message::NetInfo* release_netinfo();
  ::message::NetInfo* mutable_netinfo();
  void set_allocated_netinfo(::message::NetInfo* netinfo);
  private:
  const ::message::NetInfo& _internal_netinfo() const;
  ::message::NetInfo* _internal_mutable_netinfo();
  public:
  void unsafe_arena_set_allocated_netinfo(
      ::message::NetInfo* netinfo);
  ::message::NetInfo* unsafe_arena_release_netinfo();

  // @@protoc_insertion_point(class_scope:message.Login)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr uid_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr token_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr vender_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr meta_;
    ::message::NetInfo* netinfo_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_login_2eproto;
};
// -------------------------------------------------------------------

class LoginRes final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:message.LoginRes) */ {
 public:
  inline LoginRes() : LoginRes(nullptr) {}
  ~LoginRes() override;
  explicit PROTOBUF_CONSTEXPR LoginRes(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  LoginRes(const LoginRes& from);
  LoginRes(LoginRes&& from) noexcept
    : LoginRes() {
    *this = ::std::move(from);
  }

  inline LoginRes& operator=(const LoginRes& from) {
    CopyFrom(from);
    return *this;
  }
  inline LoginRes& operator=(LoginRes&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const LoginRes& default_instance() {
    return *internal_default_instance();
  }
  static inline const LoginRes* internal_default_instance() {
    return reinterpret_cast<const LoginRes*>(
               &_LoginRes_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(LoginRes& a, LoginRes& b) {
    a.Swap(&b);
  }
  inline void Swap(LoginRes* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LoginRes* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  LoginRes* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<LoginRes>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const LoginRes& from);
  void MergeFrom(const LoginRes& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(LoginRes* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "message.LoginRes";
  }
  protected:
  explicit LoginRes(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUidFieldNumber = 1,
    kPublicIpFieldNumber = 4,
    kMetaFieldNumber = 5,
    kResCodeFieldNumber = 2,
    kGatewayIdFieldNumber = 3,
  };
  // bytes uid = 1;
  void clear_uid();
  const std::string& uid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_uid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_uid();
  PROTOBUF_NODISCARD std::string* release_uid();
  void set_allocated_uid(std::string* uid);
  private:
  const std::string& _internal_uid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_uid(const std::string& value);
  std::string* _internal_mutable_uid();
  public:

  // bytes public_ip = 4;
  void clear_public_ip();
  const std::string& public_ip() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_public_ip(ArgT0&& arg0, ArgT... args);
  std::string* mutable_public_ip();
  PROTOBUF_NODISCARD std::string* release_public_ip();
  void set_allocated_public_ip(std::string* public_ip);
  private:
  const std::string& _internal_public_ip() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_public_ip(const std::string& value);
  std::string* _internal_mutable_public_ip();
  public:

  // bytes meta = 5;
  void clear_meta();
  const std::string& meta() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_meta(ArgT0&& arg0, ArgT... args);
  std::string* mutable_meta();
  PROTOBUF_NODISCARD std::string* release_meta();
  void set_allocated_meta(std::string* meta);
  private:
  const std::string& _internal_meta() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_meta(const std::string& value);
  std::string* _internal_mutable_meta();
  public:

  // int32 res_code = 2;
  void clear_res_code();
  int32_t res_code() const;
  void set_res_code(int32_t value);
  private:
  int32_t _internal_res_code() const;
  void _internal_set_res_code(int32_t value);
  public:

  // int32 gateway_id = 3;
  void clear_gateway_id();
  int32_t gateway_id() const;
  void set_gateway_id(int32_t value);
  private:
  int32_t _internal_gateway_id() const;
  void _internal_set_gateway_id(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:message.LoginRes)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr uid_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr public_ip_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr meta_;
    int32_t res_code_;
    int32_t gateway_id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_login_2eproto;
};
// -------------------------------------------------------------------

class CpeNodeChangeNotify final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:message.CpeNodeChangeNotify) */ {
 public:
  inline CpeNodeChangeNotify() : CpeNodeChangeNotify(nullptr) {}
  ~CpeNodeChangeNotify() override;
  explicit PROTOBUF_CONSTEXPR CpeNodeChangeNotify(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CpeNodeChangeNotify(const CpeNodeChangeNotify& from);
  CpeNodeChangeNotify(CpeNodeChangeNotify&& from) noexcept
    : CpeNodeChangeNotify() {
    *this = ::std::move(from);
  }

  inline CpeNodeChangeNotify& operator=(const CpeNodeChangeNotify& from) {
    CopyFrom(from);
    return *this;
  }
  inline CpeNodeChangeNotify& operator=(CpeNodeChangeNotify&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const CpeNodeChangeNotify& default_instance() {
    return *internal_default_instance();
  }
  static inline const CpeNodeChangeNotify* internal_default_instance() {
    return reinterpret_cast<const CpeNodeChangeNotify*>(
               &_CpeNodeChangeNotify_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(CpeNodeChangeNotify& a, CpeNodeChangeNotify& b) {
    a.Swap(&b);
  }
  inline void Swap(CpeNodeChangeNotify* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CpeNodeChangeNotify* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CpeNodeChangeNotify* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CpeNodeChangeNotify>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const CpeNodeChangeNotify& from);
  void MergeFrom(const CpeNodeChangeNotify& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(CpeNodeChangeNotify* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "message.CpeNodeChangeNotify";
  }
  protected:
  explicit CpeNodeChangeNotify(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUidFieldNumber = 1,
    kDataFieldNumber = 2,
  };
  // bytes uid = 1;
  void clear_uid();
  const std::string& uid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_uid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_uid();
  PROTOBUF_NODISCARD std::string* release_uid();
  void set_allocated_uid(std::string* uid);
  private:
  const std::string& _internal_uid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_uid(const std::string& value);
  std::string* _internal_mutable_uid();
  public:

  // bytes data = 2;
  void clear_data();
  const std::string& data() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_data(ArgT0&& arg0, ArgT... args);
  std::string* mutable_data();
  PROTOBUF_NODISCARD std::string* release_data();
  void set_allocated_data(std::string* data);
  private:
  const std::string& _internal_data() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_data(const std::string& value);
  std::string* _internal_mutable_data();
  public:

  // @@protoc_insertion_point(class_scope:message.CpeNodeChangeNotify)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr uid_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr data_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_login_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// NetInfo

// int32 node_id = 1;
inline void NetInfo::clear_node_id() {
  _impl_.node_id_ = 0;
}
inline int32_t NetInfo::_internal_node_id() const {
  return _impl_.node_id_;
}
inline int32_t NetInfo::node_id() const {
  // @@protoc_insertion_point(field_get:message.NetInfo.node_id)
  return _internal_node_id();
}
inline void NetInfo::_internal_set_node_id(int32_t value) {
  
  _impl_.node_id_ = value;
}
inline void NetInfo::set_node_id(int32_t value) {
  _internal_set_node_id(value);
  // @@protoc_insertion_point(field_set:message.NetInfo.node_id)
}

// bytes virtual_ip = 2;
inline void NetInfo::clear_virtual_ip() {
  _impl_.virtual_ip_.ClearToEmpty();
}
inline const std::string& NetInfo::virtual_ip() const {
  // @@protoc_insertion_point(field_get:message.NetInfo.virtual_ip)
  return _internal_virtual_ip();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void NetInfo::set_virtual_ip(ArgT0&& arg0, ArgT... args) {
 
 _impl_.virtual_ip_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:message.NetInfo.virtual_ip)
}
inline std::string* NetInfo::mutable_virtual_ip() {
  std::string* _s = _internal_mutable_virtual_ip();
  // @@protoc_insertion_point(field_mutable:message.NetInfo.virtual_ip)
  return _s;
}
inline const std::string& NetInfo::_internal_virtual_ip() const {
  return _impl_.virtual_ip_.Get();
}
inline void NetInfo::_internal_set_virtual_ip(const std::string& value) {
  
  _impl_.virtual_ip_.Set(value, GetArenaForAllocation());
}
inline std::string* NetInfo::_internal_mutable_virtual_ip() {
  
  return _impl_.virtual_ip_.Mutable(GetArenaForAllocation());
}
inline std::string* NetInfo::release_virtual_ip() {
  // @@protoc_insertion_point(field_release:message.NetInfo.virtual_ip)
  return _impl_.virtual_ip_.Release();
}
inline void NetInfo::set_allocated_virtual_ip(std::string* virtual_ip) {
  if (virtual_ip != nullptr) {
    
  } else {
    
  }
  _impl_.virtual_ip_.SetAllocated(virtual_ip, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.virtual_ip_.IsDefault()) {
    _impl_.virtual_ip_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:message.NetInfo.virtual_ip)
}

// bytes subnet_ip_start = 3;
inline void NetInfo::clear_subnet_ip_start() {
  _impl_.subnet_ip_start_.ClearToEmpty();
}
inline const std::string& NetInfo::subnet_ip_start() const {
  // @@protoc_insertion_point(field_get:message.NetInfo.subnet_ip_start)
  return _internal_subnet_ip_start();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void NetInfo::set_subnet_ip_start(ArgT0&& arg0, ArgT... args) {
 
 _impl_.subnet_ip_start_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:message.NetInfo.subnet_ip_start)
}
inline std::string* NetInfo::mutable_subnet_ip_start() {
  std::string* _s = _internal_mutable_subnet_ip_start();
  // @@protoc_insertion_point(field_mutable:message.NetInfo.subnet_ip_start)
  return _s;
}
inline const std::string& NetInfo::_internal_subnet_ip_start() const {
  return _impl_.subnet_ip_start_.Get();
}
inline void NetInfo::_internal_set_subnet_ip_start(const std::string& value) {
  
  _impl_.subnet_ip_start_.Set(value, GetArenaForAllocation());
}
inline std::string* NetInfo::_internal_mutable_subnet_ip_start() {
  
  return _impl_.subnet_ip_start_.Mutable(GetArenaForAllocation());
}
inline std::string* NetInfo::release_subnet_ip_start() {
  // @@protoc_insertion_point(field_release:message.NetInfo.subnet_ip_start)
  return _impl_.subnet_ip_start_.Release();
}
inline void NetInfo::set_allocated_subnet_ip_start(std::string* subnet_ip_start) {
  if (subnet_ip_start != nullptr) {
    
  } else {
    
  }
  _impl_.subnet_ip_start_.SetAllocated(subnet_ip_start, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.subnet_ip_start_.IsDefault()) {
    _impl_.subnet_ip_start_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:message.NetInfo.subnet_ip_start)
}

// int32 net_mask = 4;
inline void NetInfo::clear_net_mask() {
  _impl_.net_mask_ = 0;
}
inline int32_t NetInfo::_internal_net_mask() const {
  return _impl_.net_mask_;
}
inline int32_t NetInfo::net_mask() const {
  // @@protoc_insertion_point(field_get:message.NetInfo.net_mask)
  return _internal_net_mask();
}
inline void NetInfo::_internal_set_net_mask(int32_t value) {
  
  _impl_.net_mask_ = value;
}
inline void NetInfo::set_net_mask(int32_t value) {
  _internal_set_net_mask(value);
  // @@protoc_insertion_point(field_set:message.NetInfo.net_mask)
}

// bytes mac_addr = 5;
inline void NetInfo::clear_mac_addr() {
  _impl_.mac_addr_.ClearToEmpty();
}
inline const std::string& NetInfo::mac_addr() const {
  // @@protoc_insertion_point(field_get:message.NetInfo.mac_addr)
  return _internal_mac_addr();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void NetInfo::set_mac_addr(ArgT0&& arg0, ArgT... args) {
 
 _impl_.mac_addr_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:message.NetInfo.mac_addr)
}
inline std::string* NetInfo::mutable_mac_addr() {
  std::string* _s = _internal_mutable_mac_addr();
  // @@protoc_insertion_point(field_mutable:message.NetInfo.mac_addr)
  return _s;
}
inline const std::string& NetInfo::_internal_mac_addr() const {
  return _impl_.mac_addr_.Get();
}
inline void NetInfo::_internal_set_mac_addr(const std::string& value) {
  
  _impl_.mac_addr_.Set(value, GetArenaForAllocation());
}
inline std::string* NetInfo::_internal_mutable_mac_addr() {
  
  return _impl_.mac_addr_.Mutable(GetArenaForAllocation());
}
inline std::string* NetInfo::release_mac_addr() {
  // @@protoc_insertion_point(field_release:message.NetInfo.mac_addr)
  return _impl_.mac_addr_.Release();
}
inline void NetInfo::set_allocated_mac_addr(std::string* mac_addr) {
  if (mac_addr != nullptr) {
    
  } else {
    
  }
  _impl_.mac_addr_.SetAllocated(mac_addr, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.mac_addr_.IsDefault()) {
    _impl_.mac_addr_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:message.NetInfo.mac_addr)
}

// bytes meta = 6;
inline void NetInfo::clear_meta() {
  _impl_.meta_.ClearToEmpty();
}
inline const std::string& NetInfo::meta() const {
  // @@protoc_insertion_point(field_get:message.NetInfo.meta)
  return _internal_meta();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void NetInfo::set_meta(ArgT0&& arg0, ArgT... args) {
 
 _impl_.meta_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:message.NetInfo.meta)
}
inline std::string* NetInfo::mutable_meta() {
  std::string* _s = _internal_mutable_meta();
  // @@protoc_insertion_point(field_mutable:message.NetInfo.meta)
  return _s;
}
inline const std::string& NetInfo::_internal_meta() const {
  return _impl_.meta_.Get();
}
inline void NetInfo::_internal_set_meta(const std::string& value) {
  
  _impl_.meta_.Set(value, GetArenaForAllocation());
}
inline std::string* NetInfo::_internal_mutable_meta() {
  
  return _impl_.meta_.Mutable(GetArenaForAllocation());
}
inline std::string* NetInfo::release_meta() {
  // @@protoc_insertion_point(field_release:message.NetInfo.meta)
  return _impl_.meta_.Release();
}
inline void NetInfo::set_allocated_meta(std::string* meta) {
  if (meta != nullptr) {
    
  } else {
    
  }
  _impl_.meta_.SetAllocated(meta, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.meta_.IsDefault()) {
    _impl_.meta_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:message.NetInfo.meta)
}

// -------------------------------------------------------------------

// NodeInfoList

// repeated .message.NetInfo cpe_list = 1;
inline int NodeInfoList::_internal_cpe_list_size() const {
  return _impl_.cpe_list_.size();
}
inline int NodeInfoList::cpe_list_size() const {
  return _internal_cpe_list_size();
}
inline void NodeInfoList::clear_cpe_list() {
  _impl_.cpe_list_.Clear();
}
inline ::message::NetInfo* NodeInfoList::mutable_cpe_list(int index) {
  // @@protoc_insertion_point(field_mutable:message.NodeInfoList.cpe_list)
  return _impl_.cpe_list_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::message::NetInfo >*
NodeInfoList::mutable_cpe_list() {
  // @@protoc_insertion_point(field_mutable_list:message.NodeInfoList.cpe_list)
  return &_impl_.cpe_list_;
}
inline const ::message::NetInfo& NodeInfoList::_internal_cpe_list(int index) const {
  return _impl_.cpe_list_.Get(index);
}
inline const ::message::NetInfo& NodeInfoList::cpe_list(int index) const {
  // @@protoc_insertion_point(field_get:message.NodeInfoList.cpe_list)
  return _internal_cpe_list(index);
}
inline ::message::NetInfo* NodeInfoList::_internal_add_cpe_list() {
  return _impl_.cpe_list_.Add();
}
inline ::message::NetInfo* NodeInfoList::add_cpe_list() {
  ::message::NetInfo* _add = _internal_add_cpe_list();
  // @@protoc_insertion_point(field_add:message.NodeInfoList.cpe_list)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::message::NetInfo >&
NodeInfoList::cpe_list() const {
  // @@protoc_insertion_point(field_list:message.NodeInfoList.cpe_list)
  return _impl_.cpe_list_;
}

// -------------------------------------------------------------------

// Login

// bytes uid = 1;
inline void Login::clear_uid() {
  _impl_.uid_.ClearToEmpty();
}
inline const std::string& Login::uid() const {
  // @@protoc_insertion_point(field_get:message.Login.uid)
  return _internal_uid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Login::set_uid(ArgT0&& arg0, ArgT... args) {
 
 _impl_.uid_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:message.Login.uid)
}
inline std::string* Login::mutable_uid() {
  std::string* _s = _internal_mutable_uid();
  // @@protoc_insertion_point(field_mutable:message.Login.uid)
  return _s;
}
inline const std::string& Login::_internal_uid() const {
  return _impl_.uid_.Get();
}
inline void Login::_internal_set_uid(const std::string& value) {
  
  _impl_.uid_.Set(value, GetArenaForAllocation());
}
inline std::string* Login::_internal_mutable_uid() {
  
  return _impl_.uid_.Mutable(GetArenaForAllocation());
}
inline std::string* Login::release_uid() {
  // @@protoc_insertion_point(field_release:message.Login.uid)
  return _impl_.uid_.Release();
}
inline void Login::set_allocated_uid(std::string* uid) {
  if (uid != nullptr) {
    
  } else {
    
  }
  _impl_.uid_.SetAllocated(uid, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.uid_.IsDefault()) {
    _impl_.uid_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:message.Login.uid)
}

// bytes token = 2;
inline void Login::clear_token() {
  _impl_.token_.ClearToEmpty();
}
inline const std::string& Login::token() const {
  // @@protoc_insertion_point(field_get:message.Login.token)
  return _internal_token();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Login::set_token(ArgT0&& arg0, ArgT... args) {
 
 _impl_.token_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:message.Login.token)
}
inline std::string* Login::mutable_token() {
  std::string* _s = _internal_mutable_token();
  // @@protoc_insertion_point(field_mutable:message.Login.token)
  return _s;
}
inline const std::string& Login::_internal_token() const {
  return _impl_.token_.Get();
}
inline void Login::_internal_set_token(const std::string& value) {
  
  _impl_.token_.Set(value, GetArenaForAllocation());
}
inline std::string* Login::_internal_mutable_token() {
  
  return _impl_.token_.Mutable(GetArenaForAllocation());
}
inline std::string* Login::release_token() {
  // @@protoc_insertion_point(field_release:message.Login.token)
  return _impl_.token_.Release();
}
inline void Login::set_allocated_token(std::string* token) {
  if (token != nullptr) {
    
  } else {
    
  }
  _impl_.token_.SetAllocated(token, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.token_.IsDefault()) {
    _impl_.token_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:message.Login.token)
}

// .message.NetInfo netinfo = 3;
inline bool Login::_internal_has_netinfo() const {
  return this != internal_default_instance() && _impl_.netinfo_ != nullptr;
}
inline bool Login::has_netinfo() const {
  return _internal_has_netinfo();
}
inline void Login::clear_netinfo() {
  if (GetArenaForAllocation() == nullptr && _impl_.netinfo_ != nullptr) {
    delete _impl_.netinfo_;
  }
  _impl_.netinfo_ = nullptr;
}
inline const ::message::NetInfo& Login::_internal_netinfo() const {
  const ::message::NetInfo* p = _impl_.netinfo_;
  return p != nullptr ? *p : reinterpret_cast<const ::message::NetInfo&>(
      ::message::_NetInfo_default_instance_);
}
inline const ::message::NetInfo& Login::netinfo() const {
  // @@protoc_insertion_point(field_get:message.Login.netinfo)
  return _internal_netinfo();
}
inline void Login::unsafe_arena_set_allocated_netinfo(
    ::message::NetInfo* netinfo) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.netinfo_);
  }
  _impl_.netinfo_ = netinfo;
  if (netinfo) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:message.Login.netinfo)
}
inline ::message::NetInfo* Login::release_netinfo() {
  
  ::message::NetInfo* temp = _impl_.netinfo_;
  _impl_.netinfo_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::message::NetInfo* Login::unsafe_arena_release_netinfo() {
  // @@protoc_insertion_point(field_release:message.Login.netinfo)
  
  ::message::NetInfo* temp = _impl_.netinfo_;
  _impl_.netinfo_ = nullptr;
  return temp;
}
inline ::message::NetInfo* Login::_internal_mutable_netinfo() {
  
  if (_impl_.netinfo_ == nullptr) {
    auto* p = CreateMaybeMessage<::message::NetInfo>(GetArenaForAllocation());
    _impl_.netinfo_ = p;
  }
  return _impl_.netinfo_;
}
inline ::message::NetInfo* Login::mutable_netinfo() {
  ::message::NetInfo* _msg = _internal_mutable_netinfo();
  // @@protoc_insertion_point(field_mutable:message.Login.netinfo)
  return _msg;
}
inline void Login::set_allocated_netinfo(::message::NetInfo* netinfo) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.netinfo_;
  }
  if (netinfo) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(netinfo);
    if (message_arena != submessage_arena) {
      netinfo = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, netinfo, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.netinfo_ = netinfo;
  // @@protoc_insertion_point(field_set_allocated:message.Login.netinfo)
}

// bytes vender = 4;
inline void Login::clear_vender() {
  _impl_.vender_.ClearToEmpty();
}
inline const std::string& Login::vender() const {
  // @@protoc_insertion_point(field_get:message.Login.vender)
  return _internal_vender();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Login::set_vender(ArgT0&& arg0, ArgT... args) {
 
 _impl_.vender_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:message.Login.vender)
}
inline std::string* Login::mutable_vender() {
  std::string* _s = _internal_mutable_vender();
  // @@protoc_insertion_point(field_mutable:message.Login.vender)
  return _s;
}
inline const std::string& Login::_internal_vender() const {
  return _impl_.vender_.Get();
}
inline void Login::_internal_set_vender(const std::string& value) {
  
  _impl_.vender_.Set(value, GetArenaForAllocation());
}
inline std::string* Login::_internal_mutable_vender() {
  
  return _impl_.vender_.Mutable(GetArenaForAllocation());
}
inline std::string* Login::release_vender() {
  // @@protoc_insertion_point(field_release:message.Login.vender)
  return _impl_.vender_.Release();
}
inline void Login::set_allocated_vender(std::string* vender) {
  if (vender != nullptr) {
    
  } else {
    
  }
  _impl_.vender_.SetAllocated(vender, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.vender_.IsDefault()) {
    _impl_.vender_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:message.Login.vender)
}

// bytes meta = 5;
inline void Login::clear_meta() {
  _impl_.meta_.ClearToEmpty();
}
inline const std::string& Login::meta() const {
  // @@protoc_insertion_point(field_get:message.Login.meta)
  return _internal_meta();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Login::set_meta(ArgT0&& arg0, ArgT... args) {
 
 _impl_.meta_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:message.Login.meta)
}
inline std::string* Login::mutable_meta() {
  std::string* _s = _internal_mutable_meta();
  // @@protoc_insertion_point(field_mutable:message.Login.meta)
  return _s;
}
inline const std::string& Login::_internal_meta() const {
  return _impl_.meta_.Get();
}
inline void Login::_internal_set_meta(const std::string& value) {
  
  _impl_.meta_.Set(value, GetArenaForAllocation());
}
inline std::string* Login::_internal_mutable_meta() {
  
  return _impl_.meta_.Mutable(GetArenaForAllocation());
}
inline std::string* Login::release_meta() {
  // @@protoc_insertion_point(field_release:message.Login.meta)
  return _impl_.meta_.Release();
}
inline void Login::set_allocated_meta(std::string* meta) {
  if (meta != nullptr) {
    
  } else {
    
  }
  _impl_.meta_.SetAllocated(meta, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.meta_.IsDefault()) {
    _impl_.meta_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:message.Login.meta)
}

// -------------------------------------------------------------------

// LoginRes

// bytes uid = 1;
inline void LoginRes::clear_uid() {
  _impl_.uid_.ClearToEmpty();
}
inline const std::string& LoginRes::uid() const {
  // @@protoc_insertion_point(field_get:message.LoginRes.uid)
  return _internal_uid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void LoginRes::set_uid(ArgT0&& arg0, ArgT... args) {
 
 _impl_.uid_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:message.LoginRes.uid)
}
inline std::string* LoginRes::mutable_uid() {
  std::string* _s = _internal_mutable_uid();
  // @@protoc_insertion_point(field_mutable:message.LoginRes.uid)
  return _s;
}
inline const std::string& LoginRes::_internal_uid() const {
  return _impl_.uid_.Get();
}
inline void LoginRes::_internal_set_uid(const std::string& value) {
  
  _impl_.uid_.Set(value, GetArenaForAllocation());
}
inline std::string* LoginRes::_internal_mutable_uid() {
  
  return _impl_.uid_.Mutable(GetArenaForAllocation());
}
inline std::string* LoginRes::release_uid() {
  // @@protoc_insertion_point(field_release:message.LoginRes.uid)
  return _impl_.uid_.Release();
}
inline void LoginRes::set_allocated_uid(std::string* uid) {
  if (uid != nullptr) {
    
  } else {
    
  }
  _impl_.uid_.SetAllocated(uid, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.uid_.IsDefault()) {
    _impl_.uid_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:message.LoginRes.uid)
}

// int32 res_code = 2;
inline void LoginRes::clear_res_code() {
  _impl_.res_code_ = 0;
}
inline int32_t LoginRes::_internal_res_code() const {
  return _impl_.res_code_;
}
inline int32_t LoginRes::res_code() const {
  // @@protoc_insertion_point(field_get:message.LoginRes.res_code)
  return _internal_res_code();
}
inline void LoginRes::_internal_set_res_code(int32_t value) {
  
  _impl_.res_code_ = value;
}
inline void LoginRes::set_res_code(int32_t value) {
  _internal_set_res_code(value);
  // @@protoc_insertion_point(field_set:message.LoginRes.res_code)
}

// int32 gateway_id = 3;
inline void LoginRes::clear_gateway_id() {
  _impl_.gateway_id_ = 0;
}
inline int32_t LoginRes::_internal_gateway_id() const {
  return _impl_.gateway_id_;
}
inline int32_t LoginRes::gateway_id() const {
  // @@protoc_insertion_point(field_get:message.LoginRes.gateway_id)
  return _internal_gateway_id();
}
inline void LoginRes::_internal_set_gateway_id(int32_t value) {
  
  _impl_.gateway_id_ = value;
}
inline void LoginRes::set_gateway_id(int32_t value) {
  _internal_set_gateway_id(value);
  // @@protoc_insertion_point(field_set:message.LoginRes.gateway_id)
}

// bytes public_ip = 4;
inline void LoginRes::clear_public_ip() {
  _impl_.public_ip_.ClearToEmpty();
}
inline const std::string& LoginRes::public_ip() const {
  // @@protoc_insertion_point(field_get:message.LoginRes.public_ip)
  return _internal_public_ip();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void LoginRes::set_public_ip(ArgT0&& arg0, ArgT... args) {
 
 _impl_.public_ip_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:message.LoginRes.public_ip)
}
inline std::string* LoginRes::mutable_public_ip() {
  std::string* _s = _internal_mutable_public_ip();
  // @@protoc_insertion_point(field_mutable:message.LoginRes.public_ip)
  return _s;
}
inline const std::string& LoginRes::_internal_public_ip() const {
  return _impl_.public_ip_.Get();
}
inline void LoginRes::_internal_set_public_ip(const std::string& value) {
  
  _impl_.public_ip_.Set(value, GetArenaForAllocation());
}
inline std::string* LoginRes::_internal_mutable_public_ip() {
  
  return _impl_.public_ip_.Mutable(GetArenaForAllocation());
}
inline std::string* LoginRes::release_public_ip() {
  // @@protoc_insertion_point(field_release:message.LoginRes.public_ip)
  return _impl_.public_ip_.Release();
}
inline void LoginRes::set_allocated_public_ip(std::string* public_ip) {
  if (public_ip != nullptr) {
    
  } else {
    
  }
  _impl_.public_ip_.SetAllocated(public_ip, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.public_ip_.IsDefault()) {
    _impl_.public_ip_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:message.LoginRes.public_ip)
}

// bytes meta = 5;
inline void LoginRes::clear_meta() {
  _impl_.meta_.ClearToEmpty();
}
inline const std::string& LoginRes::meta() const {
  // @@protoc_insertion_point(field_get:message.LoginRes.meta)
  return _internal_meta();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void LoginRes::set_meta(ArgT0&& arg0, ArgT... args) {
 
 _impl_.meta_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:message.LoginRes.meta)
}
inline std::string* LoginRes::mutable_meta() {
  std::string* _s = _internal_mutable_meta();
  // @@protoc_insertion_point(field_mutable:message.LoginRes.meta)
  return _s;
}
inline const std::string& LoginRes::_internal_meta() const {
  return _impl_.meta_.Get();
}
inline void LoginRes::_internal_set_meta(const std::string& value) {
  
  _impl_.meta_.Set(value, GetArenaForAllocation());
}
inline std::string* LoginRes::_internal_mutable_meta() {
  
  return _impl_.meta_.Mutable(GetArenaForAllocation());
}
inline std::string* LoginRes::release_meta() {
  // @@protoc_insertion_point(field_release:message.LoginRes.meta)
  return _impl_.meta_.Release();
}
inline void LoginRes::set_allocated_meta(std::string* meta) {
  if (meta != nullptr) {
    
  } else {
    
  }
  _impl_.meta_.SetAllocated(meta, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.meta_.IsDefault()) {
    _impl_.meta_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:message.LoginRes.meta)
}

// -------------------------------------------------------------------

// CpeNodeChangeNotify

// bytes uid = 1;
inline void CpeNodeChangeNotify::clear_uid() {
  _impl_.uid_.ClearToEmpty();
}
inline const std::string& CpeNodeChangeNotify::uid() const {
  // @@protoc_insertion_point(field_get:message.CpeNodeChangeNotify.uid)
  return _internal_uid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CpeNodeChangeNotify::set_uid(ArgT0&& arg0, ArgT... args) {
 
 _impl_.uid_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:message.CpeNodeChangeNotify.uid)
}
inline std::string* CpeNodeChangeNotify::mutable_uid() {
  std::string* _s = _internal_mutable_uid();
  // @@protoc_insertion_point(field_mutable:message.CpeNodeChangeNotify.uid)
  return _s;
}
inline const std::string& CpeNodeChangeNotify::_internal_uid() const {
  return _impl_.uid_.Get();
}
inline void CpeNodeChangeNotify::_internal_set_uid(const std::string& value) {
  
  _impl_.uid_.Set(value, GetArenaForAllocation());
}
inline std::string* CpeNodeChangeNotify::_internal_mutable_uid() {
  
  return _impl_.uid_.Mutable(GetArenaForAllocation());
}
inline std::string* CpeNodeChangeNotify::release_uid() {
  // @@protoc_insertion_point(field_release:message.CpeNodeChangeNotify.uid)
  return _impl_.uid_.Release();
}
inline void CpeNodeChangeNotify::set_allocated_uid(std::string* uid) {
  if (uid != nullptr) {
    
  } else {
    
  }
  _impl_.uid_.SetAllocated(uid, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.uid_.IsDefault()) {
    _impl_.uid_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:message.CpeNodeChangeNotify.uid)
}

// bytes data = 2;
inline void CpeNodeChangeNotify::clear_data() {
  _impl_.data_.ClearToEmpty();
}
inline const std::string& CpeNodeChangeNotify::data() const {
  // @@protoc_insertion_point(field_get:message.CpeNodeChangeNotify.data)
  return _internal_data();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CpeNodeChangeNotify::set_data(ArgT0&& arg0, ArgT... args) {
 
 _impl_.data_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:message.CpeNodeChangeNotify.data)
}
inline std::string* CpeNodeChangeNotify::mutable_data() {
  std::string* _s = _internal_mutable_data();
  // @@protoc_insertion_point(field_mutable:message.CpeNodeChangeNotify.data)
  return _s;
}
inline const std::string& CpeNodeChangeNotify::_internal_data() const {
  return _impl_.data_.Get();
}
inline void CpeNodeChangeNotify::_internal_set_data(const std::string& value) {
  
  _impl_.data_.Set(value, GetArenaForAllocation());
}
inline std::string* CpeNodeChangeNotify::_internal_mutable_data() {
  
  return _impl_.data_.Mutable(GetArenaForAllocation());
}
inline std::string* CpeNodeChangeNotify::release_data() {
  // @@protoc_insertion_point(field_release:message.CpeNodeChangeNotify.data)
  return _impl_.data_.Release();
}
inline void CpeNodeChangeNotify::set_allocated_data(std::string* data) {
  if (data != nullptr) {
    
  } else {
    
  }
  _impl_.data_.SetAllocated(data, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.data_.IsDefault()) {
    _impl_.data_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:message.CpeNodeChangeNotify.data)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace message

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_login_2eproto
