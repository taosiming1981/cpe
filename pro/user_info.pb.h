// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: user_info.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_user_5finfo_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_user_5finfo_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3020000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3020001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_user_5finfo_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_user_5finfo_2eproto {
  static const uint32_t offsets[];
};
namespace message {
class CustemorInfo;
struct CustemorInfoDefaultTypeInternal;
extern CustemorInfoDefaultTypeInternal _CustemorInfo_default_instance_;
class CustemorPEList;
struct CustemorPEListDefaultTypeInternal;
extern CustemorPEListDefaultTypeInternal _CustemorPEList_default_instance_;
class UserListOnEdge;
struct UserListOnEdgeDefaultTypeInternal;
extern UserListOnEdgeDefaultTypeInternal _UserListOnEdge_default_instance_;
}  // namespace message
PROTOBUF_NAMESPACE_OPEN
template<> ::message::CustemorInfo* Arena::CreateMaybeMessage<::message::CustemorInfo>(Arena*);
template<> ::message::CustemorPEList* Arena::CreateMaybeMessage<::message::CustemorPEList>(Arena*);
template<> ::message::UserListOnEdge* Arena::CreateMaybeMessage<::message::UserListOnEdge>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace message {

// ===================================================================

class CustemorInfo final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:message.CustemorInfo) */ {
 public:
  inline CustemorInfo() : CustemorInfo(nullptr) {}
  ~CustemorInfo() override;
  explicit PROTOBUF_CONSTEXPR CustemorInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CustemorInfo(const CustemorInfo& from);
  CustemorInfo(CustemorInfo&& from) noexcept
    : CustemorInfo() {
    *this = ::std::move(from);
  }

  inline CustemorInfo& operator=(const CustemorInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline CustemorInfo& operator=(CustemorInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const CustemorInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const CustemorInfo* internal_default_instance() {
    return reinterpret_cast<const CustemorInfo*>(
               &_CustemorInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(CustemorInfo& a, CustemorInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(CustemorInfo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CustemorInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CustemorInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CustemorInfo>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const CustemorInfo& from);
  void MergeFrom(const CustemorInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(CustemorInfo* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "message.CustemorInfo";
  }
  protected:
  explicit CustemorInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCpeIdFieldNumber = 1,
    kCpeIpFieldNumber = 2,
    kCpeVenderFieldNumber = 3,
  };
  // bytes cpe_id = 1;
  void clear_cpe_id();
  const std::string& cpe_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_cpe_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_cpe_id();
  PROTOBUF_NODISCARD std::string* release_cpe_id();
  void set_allocated_cpe_id(std::string* cpe_id);
  private:
  const std::string& _internal_cpe_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_cpe_id(const std::string& value);
  std::string* _internal_mutable_cpe_id();
  public:

  // bytes cpe_ip = 2;
  void clear_cpe_ip();
  const std::string& cpe_ip() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_cpe_ip(ArgT0&& arg0, ArgT... args);
  std::string* mutable_cpe_ip();
  PROTOBUF_NODISCARD std::string* release_cpe_ip();
  void set_allocated_cpe_ip(std::string* cpe_ip);
  private:
  const std::string& _internal_cpe_ip() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_cpe_ip(const std::string& value);
  std::string* _internal_mutable_cpe_ip();
  public:

  // bytes cpe_vender = 3;
  void clear_cpe_vender();
  const std::string& cpe_vender() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_cpe_vender(ArgT0&& arg0, ArgT... args);
  std::string* mutable_cpe_vender();
  PROTOBUF_NODISCARD std::string* release_cpe_vender();
  void set_allocated_cpe_vender(std::string* cpe_vender);
  private:
  const std::string& _internal_cpe_vender() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_cpe_vender(const std::string& value);
  std::string* _internal_mutable_cpe_vender();
  public:

  // @@protoc_insertion_point(class_scope:message.CustemorInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr cpe_id_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr cpe_ip_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr cpe_vender_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_user_5finfo_2eproto;
};
// -------------------------------------------------------------------

class CustemorPEList final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:message.CustemorPEList) */ {
 public:
  inline CustemorPEList() : CustemorPEList(nullptr) {}
  ~CustemorPEList() override;
  explicit PROTOBUF_CONSTEXPR CustemorPEList(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CustemorPEList(const CustemorPEList& from);
  CustemorPEList(CustemorPEList&& from) noexcept
    : CustemorPEList() {
    *this = ::std::move(from);
  }

  inline CustemorPEList& operator=(const CustemorPEList& from) {
    CopyFrom(from);
    return *this;
  }
  inline CustemorPEList& operator=(CustemorPEList&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const CustemorPEList& default_instance() {
    return *internal_default_instance();
  }
  static inline const CustemorPEList* internal_default_instance() {
    return reinterpret_cast<const CustemorPEList*>(
               &_CustemorPEList_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(CustemorPEList& a, CustemorPEList& b) {
    a.Swap(&b);
  }
  inline void Swap(CustemorPEList* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CustemorPEList* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CustemorPEList* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CustemorPEList>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const CustemorPEList& from);
  void MergeFrom(const CustemorPEList& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(CustemorPEList* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "message.CustemorPEList";
  }
  protected:
  explicit CustemorPEList(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCpeListFieldNumber = 5,
    kEdgeIdFieldNumber = 1,
    kEdgeIpFieldNumber = 2,
    kEdgePortFieldNumber = 3,
    kEdgeGroupFieldNumber = 4,
  };
  // repeated .message.CustemorInfo cpe_list = 5;
  int cpe_list_size() const;
  private:
  int _internal_cpe_list_size() const;
  public:
  void clear_cpe_list();
  ::message::CustemorInfo* mutable_cpe_list(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::message::CustemorInfo >*
      mutable_cpe_list();
  private:
  const ::message::CustemorInfo& _internal_cpe_list(int index) const;
  ::message::CustemorInfo* _internal_add_cpe_list();
  public:
  const ::message::CustemorInfo& cpe_list(int index) const;
  ::message::CustemorInfo* add_cpe_list();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::message::CustemorInfo >&
      cpe_list() const;

  // bytes edge_id = 1;
  void clear_edge_id();
  const std::string& edge_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_edge_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_edge_id();
  PROTOBUF_NODISCARD std::string* release_edge_id();
  void set_allocated_edge_id(std::string* edge_id);
  private:
  const std::string& _internal_edge_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_edge_id(const std::string& value);
  std::string* _internal_mutable_edge_id();
  public:

  // bytes edge_ip = 2;
  void clear_edge_ip();
  const std::string& edge_ip() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_edge_ip(ArgT0&& arg0, ArgT... args);
  std::string* mutable_edge_ip();
  PROTOBUF_NODISCARD std::string* release_edge_ip();
  void set_allocated_edge_ip(std::string* edge_ip);
  private:
  const std::string& _internal_edge_ip() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_edge_ip(const std::string& value);
  std::string* _internal_mutable_edge_ip();
  public:

  // int32 edge_port = 3;
  void clear_edge_port();
  int32_t edge_port() const;
  void set_edge_port(int32_t value);
  private:
  int32_t _internal_edge_port() const;
  void _internal_set_edge_port(int32_t value);
  public:

  // int32 edge_group = 4;
  void clear_edge_group();
  int32_t edge_group() const;
  void set_edge_group(int32_t value);
  private:
  int32_t _internal_edge_group() const;
  void _internal_set_edge_group(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:message.CustemorPEList)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::message::CustemorInfo > cpe_list_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr edge_id_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr edge_ip_;
    int32_t edge_port_;
    int32_t edge_group_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_user_5finfo_2eproto;
};
// -------------------------------------------------------------------

class UserListOnEdge final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:message.UserListOnEdge) */ {
 public:
  inline UserListOnEdge() : UserListOnEdge(nullptr) {}
  ~UserListOnEdge() override;
  explicit PROTOBUF_CONSTEXPR UserListOnEdge(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UserListOnEdge(const UserListOnEdge& from);
  UserListOnEdge(UserListOnEdge&& from) noexcept
    : UserListOnEdge() {
    *this = ::std::move(from);
  }

  inline UserListOnEdge& operator=(const UserListOnEdge& from) {
    CopyFrom(from);
    return *this;
  }
  inline UserListOnEdge& operator=(UserListOnEdge&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const UserListOnEdge& default_instance() {
    return *internal_default_instance();
  }
  static inline const UserListOnEdge* internal_default_instance() {
    return reinterpret_cast<const UserListOnEdge*>(
               &_UserListOnEdge_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(UserListOnEdge& a, UserListOnEdge& b) {
    a.Swap(&b);
  }
  inline void Swap(UserListOnEdge* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UserListOnEdge* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  UserListOnEdge* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<UserListOnEdge>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const UserListOnEdge& from);
  void MergeFrom(const UserListOnEdge& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(UserListOnEdge* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "message.UserListOnEdge";
  }
  protected:
  explicit UserListOnEdge(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEdgeListFieldNumber = 1,
  };
  // repeated .message.CustemorPEList edge_list = 1;
  int edge_list_size() const;
  private:
  int _internal_edge_list_size() const;
  public:
  void clear_edge_list();
  ::message::CustemorPEList* mutable_edge_list(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::message::CustemorPEList >*
      mutable_edge_list();
  private:
  const ::message::CustemorPEList& _internal_edge_list(int index) const;
  ::message::CustemorPEList* _internal_add_edge_list();
  public:
  const ::message::CustemorPEList& edge_list(int index) const;
  ::message::CustemorPEList* add_edge_list();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::message::CustemorPEList >&
      edge_list() const;

  // @@protoc_insertion_point(class_scope:message.UserListOnEdge)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::message::CustemorPEList > edge_list_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_user_5finfo_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// CustemorInfo

// bytes cpe_id = 1;
inline void CustemorInfo::clear_cpe_id() {
  _impl_.cpe_id_.ClearToEmpty();
}
inline const std::string& CustemorInfo::cpe_id() const {
  // @@protoc_insertion_point(field_get:message.CustemorInfo.cpe_id)
  return _internal_cpe_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CustemorInfo::set_cpe_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.cpe_id_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:message.CustemorInfo.cpe_id)
}
inline std::string* CustemorInfo::mutable_cpe_id() {
  std::string* _s = _internal_mutable_cpe_id();
  // @@protoc_insertion_point(field_mutable:message.CustemorInfo.cpe_id)
  return _s;
}
inline const std::string& CustemorInfo::_internal_cpe_id() const {
  return _impl_.cpe_id_.Get();
}
inline void CustemorInfo::_internal_set_cpe_id(const std::string& value) {
  
  _impl_.cpe_id_.Set(value, GetArenaForAllocation());
}
inline std::string* CustemorInfo::_internal_mutable_cpe_id() {
  
  return _impl_.cpe_id_.Mutable(GetArenaForAllocation());
}
inline std::string* CustemorInfo::release_cpe_id() {
  // @@protoc_insertion_point(field_release:message.CustemorInfo.cpe_id)
  return _impl_.cpe_id_.Release();
}
inline void CustemorInfo::set_allocated_cpe_id(std::string* cpe_id) {
  if (cpe_id != nullptr) {
    
  } else {
    
  }
  _impl_.cpe_id_.SetAllocated(cpe_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.cpe_id_.IsDefault()) {
    _impl_.cpe_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:message.CustemorInfo.cpe_id)
}

// bytes cpe_ip = 2;
inline void CustemorInfo::clear_cpe_ip() {
  _impl_.cpe_ip_.ClearToEmpty();
}
inline const std::string& CustemorInfo::cpe_ip() const {
  // @@protoc_insertion_point(field_get:message.CustemorInfo.cpe_ip)
  return _internal_cpe_ip();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CustemorInfo::set_cpe_ip(ArgT0&& arg0, ArgT... args) {
 
 _impl_.cpe_ip_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:message.CustemorInfo.cpe_ip)
}
inline std::string* CustemorInfo::mutable_cpe_ip() {
  std::string* _s = _internal_mutable_cpe_ip();
  // @@protoc_insertion_point(field_mutable:message.CustemorInfo.cpe_ip)
  return _s;
}
inline const std::string& CustemorInfo::_internal_cpe_ip() const {
  return _impl_.cpe_ip_.Get();
}
inline void CustemorInfo::_internal_set_cpe_ip(const std::string& value) {
  
  _impl_.cpe_ip_.Set(value, GetArenaForAllocation());
}
inline std::string* CustemorInfo::_internal_mutable_cpe_ip() {
  
  return _impl_.cpe_ip_.Mutable(GetArenaForAllocation());
}
inline std::string* CustemorInfo::release_cpe_ip() {
  // @@protoc_insertion_point(field_release:message.CustemorInfo.cpe_ip)
  return _impl_.cpe_ip_.Release();
}
inline void CustemorInfo::set_allocated_cpe_ip(std::string* cpe_ip) {
  if (cpe_ip != nullptr) {
    
  } else {
    
  }
  _impl_.cpe_ip_.SetAllocated(cpe_ip, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.cpe_ip_.IsDefault()) {
    _impl_.cpe_ip_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:message.CustemorInfo.cpe_ip)
}

// bytes cpe_vender = 3;
inline void CustemorInfo::clear_cpe_vender() {
  _impl_.cpe_vender_.ClearToEmpty();
}
inline const std::string& CustemorInfo::cpe_vender() const {
  // @@protoc_insertion_point(field_get:message.CustemorInfo.cpe_vender)
  return _internal_cpe_vender();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CustemorInfo::set_cpe_vender(ArgT0&& arg0, ArgT... args) {
 
 _impl_.cpe_vender_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:message.CustemorInfo.cpe_vender)
}
inline std::string* CustemorInfo::mutable_cpe_vender() {
  std::string* _s = _internal_mutable_cpe_vender();
  // @@protoc_insertion_point(field_mutable:message.CustemorInfo.cpe_vender)
  return _s;
}
inline const std::string& CustemorInfo::_internal_cpe_vender() const {
  return _impl_.cpe_vender_.Get();
}
inline void CustemorInfo::_internal_set_cpe_vender(const std::string& value) {
  
  _impl_.cpe_vender_.Set(value, GetArenaForAllocation());
}
inline std::string* CustemorInfo::_internal_mutable_cpe_vender() {
  
  return _impl_.cpe_vender_.Mutable(GetArenaForAllocation());
}
inline std::string* CustemorInfo::release_cpe_vender() {
  // @@protoc_insertion_point(field_release:message.CustemorInfo.cpe_vender)
  return _impl_.cpe_vender_.Release();
}
inline void CustemorInfo::set_allocated_cpe_vender(std::string* cpe_vender) {
  if (cpe_vender != nullptr) {
    
  } else {
    
  }
  _impl_.cpe_vender_.SetAllocated(cpe_vender, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.cpe_vender_.IsDefault()) {
    _impl_.cpe_vender_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:message.CustemorInfo.cpe_vender)
}

// -------------------------------------------------------------------

// CustemorPEList

// bytes edge_id = 1;
inline void CustemorPEList::clear_edge_id() {
  _impl_.edge_id_.ClearToEmpty();
}
inline const std::string& CustemorPEList::edge_id() const {
  // @@protoc_insertion_point(field_get:message.CustemorPEList.edge_id)
  return _internal_edge_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CustemorPEList::set_edge_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.edge_id_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:message.CustemorPEList.edge_id)
}
inline std::string* CustemorPEList::mutable_edge_id() {
  std::string* _s = _internal_mutable_edge_id();
  // @@protoc_insertion_point(field_mutable:message.CustemorPEList.edge_id)
  return _s;
}
inline const std::string& CustemorPEList::_internal_edge_id() const {
  return _impl_.edge_id_.Get();
}
inline void CustemorPEList::_internal_set_edge_id(const std::string& value) {
  
  _impl_.edge_id_.Set(value, GetArenaForAllocation());
}
inline std::string* CustemorPEList::_internal_mutable_edge_id() {
  
  return _impl_.edge_id_.Mutable(GetArenaForAllocation());
}
inline std::string* CustemorPEList::release_edge_id() {
  // @@protoc_insertion_point(field_release:message.CustemorPEList.edge_id)
  return _impl_.edge_id_.Release();
}
inline void CustemorPEList::set_allocated_edge_id(std::string* edge_id) {
  if (edge_id != nullptr) {
    
  } else {
    
  }
  _impl_.edge_id_.SetAllocated(edge_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.edge_id_.IsDefault()) {
    _impl_.edge_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:message.CustemorPEList.edge_id)
}

// bytes edge_ip = 2;
inline void CustemorPEList::clear_edge_ip() {
  _impl_.edge_ip_.ClearToEmpty();
}
inline const std::string& CustemorPEList::edge_ip() const {
  // @@protoc_insertion_point(field_get:message.CustemorPEList.edge_ip)
  return _internal_edge_ip();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CustemorPEList::set_edge_ip(ArgT0&& arg0, ArgT... args) {
 
 _impl_.edge_ip_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:message.CustemorPEList.edge_ip)
}
inline std::string* CustemorPEList::mutable_edge_ip() {
  std::string* _s = _internal_mutable_edge_ip();
  // @@protoc_insertion_point(field_mutable:message.CustemorPEList.edge_ip)
  return _s;
}
inline const std::string& CustemorPEList::_internal_edge_ip() const {
  return _impl_.edge_ip_.Get();
}
inline void CustemorPEList::_internal_set_edge_ip(const std::string& value) {
  
  _impl_.edge_ip_.Set(value, GetArenaForAllocation());
}
inline std::string* CustemorPEList::_internal_mutable_edge_ip() {
  
  return _impl_.edge_ip_.Mutable(GetArenaForAllocation());
}
inline std::string* CustemorPEList::release_edge_ip() {
  // @@protoc_insertion_point(field_release:message.CustemorPEList.edge_ip)
  return _impl_.edge_ip_.Release();
}
inline void CustemorPEList::set_allocated_edge_ip(std::string* edge_ip) {
  if (edge_ip != nullptr) {
    
  } else {
    
  }
  _impl_.edge_ip_.SetAllocated(edge_ip, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.edge_ip_.IsDefault()) {
    _impl_.edge_ip_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:message.CustemorPEList.edge_ip)
}

// int32 edge_port = 3;
inline void CustemorPEList::clear_edge_port() {
  _impl_.edge_port_ = 0;
}
inline int32_t CustemorPEList::_internal_edge_port() const {
  return _impl_.edge_port_;
}
inline int32_t CustemorPEList::edge_port() const {
  // @@protoc_insertion_point(field_get:message.CustemorPEList.edge_port)
  return _internal_edge_port();
}
inline void CustemorPEList::_internal_set_edge_port(int32_t value) {
  
  _impl_.edge_port_ = value;
}
inline void CustemorPEList::set_edge_port(int32_t value) {
  _internal_set_edge_port(value);
  // @@protoc_insertion_point(field_set:message.CustemorPEList.edge_port)
}

// int32 edge_group = 4;
inline void CustemorPEList::clear_edge_group() {
  _impl_.edge_group_ = 0;
}
inline int32_t CustemorPEList::_internal_edge_group() const {
  return _impl_.edge_group_;
}
inline int32_t CustemorPEList::edge_group() const {
  // @@protoc_insertion_point(field_get:message.CustemorPEList.edge_group)
  return _internal_edge_group();
}
inline void CustemorPEList::_internal_set_edge_group(int32_t value) {
  
  _impl_.edge_group_ = value;
}
inline void CustemorPEList::set_edge_group(int32_t value) {
  _internal_set_edge_group(value);
  // @@protoc_insertion_point(field_set:message.CustemorPEList.edge_group)
}

// repeated .message.CustemorInfo cpe_list = 5;
inline int CustemorPEList::_internal_cpe_list_size() const {
  return _impl_.cpe_list_.size();
}
inline int CustemorPEList::cpe_list_size() const {
  return _internal_cpe_list_size();
}
inline void CustemorPEList::clear_cpe_list() {
  _impl_.cpe_list_.Clear();
}
inline ::message::CustemorInfo* CustemorPEList::mutable_cpe_list(int index) {
  // @@protoc_insertion_point(field_mutable:message.CustemorPEList.cpe_list)
  return _impl_.cpe_list_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::message::CustemorInfo >*
CustemorPEList::mutable_cpe_list() {
  // @@protoc_insertion_point(field_mutable_list:message.CustemorPEList.cpe_list)
  return &_impl_.cpe_list_;
}
inline const ::message::CustemorInfo& CustemorPEList::_internal_cpe_list(int index) const {
  return _impl_.cpe_list_.Get(index);
}
inline const ::message::CustemorInfo& CustemorPEList::cpe_list(int index) const {
  // @@protoc_insertion_point(field_get:message.CustemorPEList.cpe_list)
  return _internal_cpe_list(index);
}
inline ::message::CustemorInfo* CustemorPEList::_internal_add_cpe_list() {
  return _impl_.cpe_list_.Add();
}
inline ::message::CustemorInfo* CustemorPEList::add_cpe_list() {
  ::message::CustemorInfo* _add = _internal_add_cpe_list();
  // @@protoc_insertion_point(field_add:message.CustemorPEList.cpe_list)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::message::CustemorInfo >&
CustemorPEList::cpe_list() const {
  // @@protoc_insertion_point(field_list:message.CustemorPEList.cpe_list)
  return _impl_.cpe_list_;
}

// -------------------------------------------------------------------

// UserListOnEdge

// repeated .message.CustemorPEList edge_list = 1;
inline int UserListOnEdge::_internal_edge_list_size() const {
  return _impl_.edge_list_.size();
}
inline int UserListOnEdge::edge_list_size() const {
  return _internal_edge_list_size();
}
inline void UserListOnEdge::clear_edge_list() {
  _impl_.edge_list_.Clear();
}
inline ::message::CustemorPEList* UserListOnEdge::mutable_edge_list(int index) {
  // @@protoc_insertion_point(field_mutable:message.UserListOnEdge.edge_list)
  return _impl_.edge_list_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::message::CustemorPEList >*
UserListOnEdge::mutable_edge_list() {
  // @@protoc_insertion_point(field_mutable_list:message.UserListOnEdge.edge_list)
  return &_impl_.edge_list_;
}
inline const ::message::CustemorPEList& UserListOnEdge::_internal_edge_list(int index) const {
  return _impl_.edge_list_.Get(index);
}
inline const ::message::CustemorPEList& UserListOnEdge::edge_list(int index) const {
  // @@protoc_insertion_point(field_get:message.UserListOnEdge.edge_list)
  return _internal_edge_list(index);
}
inline ::message::CustemorPEList* UserListOnEdge::_internal_add_edge_list() {
  return _impl_.edge_list_.Add();
}
inline ::message::CustemorPEList* UserListOnEdge::add_edge_list() {
  ::message::CustemorPEList* _add = _internal_add_edge_list();
  // @@protoc_insertion_point(field_add:message.UserListOnEdge.edge_list)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::message::CustemorPEList >&
UserListOnEdge::edge_list() const {
  // @@protoc_insertion_point(field_list:message.UserListOnEdge.edge_list)
  return _impl_.edge_list_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace message

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_user_5finfo_2eproto
