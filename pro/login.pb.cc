// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: login.proto

#include "login.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace message {
PROTOBUF_CONSTEXPR NetInfo::NetInfo(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.virtual_ip_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.subnet_ip_start_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.mac_addr_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.meta_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.node_id_)*/0
  , /*decltype(_impl_.net_mask_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct NetInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR NetInfoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~NetInfoDefaultTypeInternal() {}
  union {
    NetInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 NetInfoDefaultTypeInternal _NetInfo_default_instance_;
PROTOBUF_CONSTEXPR NodeInfoList::NodeInfoList(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.cpe_list_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct NodeInfoListDefaultTypeInternal {
  PROTOBUF_CONSTEXPR NodeInfoListDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~NodeInfoListDefaultTypeInternal() {}
  union {
    NodeInfoList _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 NodeInfoListDefaultTypeInternal _NodeInfoList_default_instance_;
PROTOBUF_CONSTEXPR Login::Login(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.uid_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.token_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.vender_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.meta_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.netinfo_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct LoginDefaultTypeInternal {
  PROTOBUF_CONSTEXPR LoginDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~LoginDefaultTypeInternal() {}
  union {
    Login _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 LoginDefaultTypeInternal _Login_default_instance_;
PROTOBUF_CONSTEXPR LoginRes::LoginRes(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.uid_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.public_ip_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.meta_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.res_code_)*/0
  , /*decltype(_impl_.gateway_id_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct LoginResDefaultTypeInternal {
  PROTOBUF_CONSTEXPR LoginResDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~LoginResDefaultTypeInternal() {}
  union {
    LoginRes _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 LoginResDefaultTypeInternal _LoginRes_default_instance_;
PROTOBUF_CONSTEXPR CpeNodeChangeNotify::CpeNodeChangeNotify(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.uid_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.data_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CpeNodeChangeNotifyDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CpeNodeChangeNotifyDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CpeNodeChangeNotifyDefaultTypeInternal() {}
  union {
    CpeNodeChangeNotify _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CpeNodeChangeNotifyDefaultTypeInternal _CpeNodeChangeNotify_default_instance_;
}  // namespace message
namespace message {

// ===================================================================

class NetInfo::_Internal {
 public:
};

NetInfo::NetInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:message.NetInfo)
}
NetInfo::NetInfo(const NetInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  NetInfo* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.virtual_ip_){}
    , decltype(_impl_.subnet_ip_start_){}
    , decltype(_impl_.mac_addr_){}
    , decltype(_impl_.meta_){}
    , decltype(_impl_.node_id_){}
    , decltype(_impl_.net_mask_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  _impl_.virtual_ip_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.virtual_ip_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_virtual_ip().empty()) {
    _this->_impl_.virtual_ip_.Set(from._internal_virtual_ip(), 
      _this->GetArenaForAllocation());
  }
  _impl_.subnet_ip_start_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.subnet_ip_start_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_subnet_ip_start().empty()) {
    _this->_impl_.subnet_ip_start_.Set(from._internal_subnet_ip_start(), 
      _this->GetArenaForAllocation());
  }
  _impl_.mac_addr_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.mac_addr_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_mac_addr().empty()) {
    _this->_impl_.mac_addr_.Set(from._internal_mac_addr(), 
      _this->GetArenaForAllocation());
  }
  _impl_.meta_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.meta_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_meta().empty()) {
    _this->_impl_.meta_.Set(from._internal_meta(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.node_id_, &from._impl_.node_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.net_mask_) -
    reinterpret_cast<char*>(&_impl_.node_id_)) + sizeof(_impl_.net_mask_));
  // @@protoc_insertion_point(copy_constructor:message.NetInfo)
}

inline void NetInfo::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.virtual_ip_){}
    , decltype(_impl_.subnet_ip_start_){}
    , decltype(_impl_.mac_addr_){}
    , decltype(_impl_.meta_){}
    , decltype(_impl_.node_id_){0}
    , decltype(_impl_.net_mask_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.virtual_ip_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.virtual_ip_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.subnet_ip_start_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.subnet_ip_start_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.mac_addr_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.mac_addr_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.meta_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.meta_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

NetInfo::~NetInfo() {
  // @@protoc_insertion_point(destructor:message.NetInfo)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void NetInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.virtual_ip_.Destroy();
  _impl_.subnet_ip_start_.Destroy();
  _impl_.mac_addr_.Destroy();
  _impl_.meta_.Destroy();
}

void NetInfo::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void NetInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:message.NetInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.virtual_ip_.ClearToEmpty();
  _impl_.subnet_ip_start_.ClearToEmpty();
  _impl_.mac_addr_.ClearToEmpty();
  _impl_.meta_.ClearToEmpty();
  ::memset(&_impl_.node_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.net_mask_) -
      reinterpret_cast<char*>(&_impl_.node_id_)) + sizeof(_impl_.net_mask_));
  _internal_metadata_.Clear<std::string>();
}

const char* NetInfo::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 node_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.node_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes virtual_ip = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_virtual_ip();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes subnet_ip_start = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_subnet_ip_start();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 net_mask = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.net_mask_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes mac_addr = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_mac_addr();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes meta = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_meta();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* NetInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:message.NetInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 node_id = 1;
  if (this->_internal_node_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_node_id(), target);
  }

  // bytes virtual_ip = 2;
  if (!this->_internal_virtual_ip().empty()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_virtual_ip(), target);
  }

  // bytes subnet_ip_start = 3;
  if (!this->_internal_subnet_ip_start().empty()) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_subnet_ip_start(), target);
  }

  // int32 net_mask = 4;
  if (this->_internal_net_mask() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(4, this->_internal_net_mask(), target);
  }

  // bytes mac_addr = 5;
  if (!this->_internal_mac_addr().empty()) {
    target = stream->WriteBytesMaybeAliased(
        5, this->_internal_mac_addr(), target);
  }

  // bytes meta = 6;
  if (!this->_internal_meta().empty()) {
    target = stream->WriteBytesMaybeAliased(
        6, this->_internal_meta(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:message.NetInfo)
  return target;
}

size_t NetInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:message.NetInfo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes virtual_ip = 2;
  if (!this->_internal_virtual_ip().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_virtual_ip());
  }

  // bytes subnet_ip_start = 3;
  if (!this->_internal_subnet_ip_start().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_subnet_ip_start());
  }

  // bytes mac_addr = 5;
  if (!this->_internal_mac_addr().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_mac_addr());
  }

  // bytes meta = 6;
  if (!this->_internal_meta().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_meta());
  }

  // int32 node_id = 1;
  if (this->_internal_node_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_node_id());
  }

  // int32 net_mask = 4;
  if (this->_internal_net_mask() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_net_mask());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void NetInfo::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const NetInfo*>(
      &from));
}

void NetInfo::MergeFrom(const NetInfo& from) {
  NetInfo* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:message.NetInfo)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_virtual_ip().empty()) {
    _this->_internal_set_virtual_ip(from._internal_virtual_ip());
  }
  if (!from._internal_subnet_ip_start().empty()) {
    _this->_internal_set_subnet_ip_start(from._internal_subnet_ip_start());
  }
  if (!from._internal_mac_addr().empty()) {
    _this->_internal_set_mac_addr(from._internal_mac_addr());
  }
  if (!from._internal_meta().empty()) {
    _this->_internal_set_meta(from._internal_meta());
  }
  if (from._internal_node_id() != 0) {
    _this->_internal_set_node_id(from._internal_node_id());
  }
  if (from._internal_net_mask() != 0) {
    _this->_internal_set_net_mask(from._internal_net_mask());
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void NetInfo::CopyFrom(const NetInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:message.NetInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NetInfo::IsInitialized() const {
  return true;
}

void NetInfo::InternalSwap(NetInfo* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.virtual_ip_, lhs_arena,
      &other->_impl_.virtual_ip_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.subnet_ip_start_, lhs_arena,
      &other->_impl_.subnet_ip_start_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.mac_addr_, lhs_arena,
      &other->_impl_.mac_addr_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.meta_, lhs_arena,
      &other->_impl_.meta_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(NetInfo, _impl_.net_mask_)
      + sizeof(NetInfo::_impl_.net_mask_)
      - PROTOBUF_FIELD_OFFSET(NetInfo, _impl_.node_id_)>(
          reinterpret_cast<char*>(&_impl_.node_id_),
          reinterpret_cast<char*>(&other->_impl_.node_id_));
}

std::string NetInfo::GetTypeName() const {
  return "message.NetInfo";
}


// ===================================================================

class NodeInfoList::_Internal {
 public:
};

NodeInfoList::NodeInfoList(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:message.NodeInfoList)
}
NodeInfoList::NodeInfoList(const NodeInfoList& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  NodeInfoList* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.cpe_list_){from._impl_.cpe_list_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:message.NodeInfoList)
}

inline void NodeInfoList::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.cpe_list_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

NodeInfoList::~NodeInfoList() {
  // @@protoc_insertion_point(destructor:message.NodeInfoList)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void NodeInfoList::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.cpe_list_.~RepeatedPtrField();
}

void NodeInfoList::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void NodeInfoList::Clear() {
// @@protoc_insertion_point(message_clear_start:message.NodeInfoList)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.cpe_list_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* NodeInfoList::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .message.NetInfo cpe_list = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_cpe_list(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* NodeInfoList::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:message.NodeInfoList)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .message.NetInfo cpe_list = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_cpe_list_size()); i < n; i++) {
    const auto& repfield = this->_internal_cpe_list(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:message.NodeInfoList)
  return target;
}

size_t NodeInfoList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:message.NodeInfoList)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .message.NetInfo cpe_list = 1;
  total_size += 1UL * this->_internal_cpe_list_size();
  for (const auto& msg : this->_impl_.cpe_list_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void NodeInfoList::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const NodeInfoList*>(
      &from));
}

void NodeInfoList::MergeFrom(const NodeInfoList& from) {
  NodeInfoList* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:message.NodeInfoList)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.cpe_list_.MergeFrom(from._impl_.cpe_list_);
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void NodeInfoList::CopyFrom(const NodeInfoList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:message.NodeInfoList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NodeInfoList::IsInitialized() const {
  return true;
}

void NodeInfoList::InternalSwap(NodeInfoList* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.cpe_list_.InternalSwap(&other->_impl_.cpe_list_);
}

std::string NodeInfoList::GetTypeName() const {
  return "message.NodeInfoList";
}


// ===================================================================

class Login::_Internal {
 public:
  static const ::message::NetInfo& netinfo(const Login* msg);
};

const ::message::NetInfo&
Login::_Internal::netinfo(const Login* msg) {
  return *msg->_impl_.netinfo_;
}
Login::Login(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:message.Login)
}
Login::Login(const Login& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  Login* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.uid_){}
    , decltype(_impl_.token_){}
    , decltype(_impl_.vender_){}
    , decltype(_impl_.meta_){}
    , decltype(_impl_.netinfo_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  _impl_.uid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.uid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_uid().empty()) {
    _this->_impl_.uid_.Set(from._internal_uid(), 
      _this->GetArenaForAllocation());
  }
  _impl_.token_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.token_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_token().empty()) {
    _this->_impl_.token_.Set(from._internal_token(), 
      _this->GetArenaForAllocation());
  }
  _impl_.vender_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.vender_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_vender().empty()) {
    _this->_impl_.vender_.Set(from._internal_vender(), 
      _this->GetArenaForAllocation());
  }
  _impl_.meta_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.meta_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_meta().empty()) {
    _this->_impl_.meta_.Set(from._internal_meta(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_netinfo()) {
    _this->_impl_.netinfo_ = new ::message::NetInfo(*from._impl_.netinfo_);
  }
  // @@protoc_insertion_point(copy_constructor:message.Login)
}

inline void Login::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.uid_){}
    , decltype(_impl_.token_){}
    , decltype(_impl_.vender_){}
    , decltype(_impl_.meta_){}
    , decltype(_impl_.netinfo_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.uid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.uid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.token_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.token_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.vender_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.vender_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.meta_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.meta_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Login::~Login() {
  // @@protoc_insertion_point(destructor:message.Login)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Login::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.uid_.Destroy();
  _impl_.token_.Destroy();
  _impl_.vender_.Destroy();
  _impl_.meta_.Destroy();
  if (this != internal_default_instance()) delete _impl_.netinfo_;
}

void Login::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Login::Clear() {
// @@protoc_insertion_point(message_clear_start:message.Login)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.uid_.ClearToEmpty();
  _impl_.token_.ClearToEmpty();
  _impl_.vender_.ClearToEmpty();
  _impl_.meta_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.netinfo_ != nullptr) {
    delete _impl_.netinfo_;
  }
  _impl_.netinfo_ = nullptr;
  _internal_metadata_.Clear<std::string>();
}

const char* Login::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes uid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_uid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes token = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_token();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .message.NetInfo netinfo = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_netinfo(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes vender = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_vender();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes meta = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_meta();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Login::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:message.Login)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes uid = 1;
  if (!this->_internal_uid().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_uid(), target);
  }

  // bytes token = 2;
  if (!this->_internal_token().empty()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_token(), target);
  }

  // .message.NetInfo netinfo = 3;
  if (this->_internal_has_netinfo()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::netinfo(this),
        _Internal::netinfo(this).GetCachedSize(), target, stream);
  }

  // bytes vender = 4;
  if (!this->_internal_vender().empty()) {
    target = stream->WriteBytesMaybeAliased(
        4, this->_internal_vender(), target);
  }

  // bytes meta = 5;
  if (!this->_internal_meta().empty()) {
    target = stream->WriteBytesMaybeAliased(
        5, this->_internal_meta(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:message.Login)
  return target;
}

size_t Login::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:message.Login)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes uid = 1;
  if (!this->_internal_uid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_uid());
  }

  // bytes token = 2;
  if (!this->_internal_token().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_token());
  }

  // bytes vender = 4;
  if (!this->_internal_vender().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_vender());
  }

  // bytes meta = 5;
  if (!this->_internal_meta().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_meta());
  }

  // .message.NetInfo netinfo = 3;
  if (this->_internal_has_netinfo()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.netinfo_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Login::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const Login*>(
      &from));
}

void Login::MergeFrom(const Login& from) {
  Login* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:message.Login)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_uid().empty()) {
    _this->_internal_set_uid(from._internal_uid());
  }
  if (!from._internal_token().empty()) {
    _this->_internal_set_token(from._internal_token());
  }
  if (!from._internal_vender().empty()) {
    _this->_internal_set_vender(from._internal_vender());
  }
  if (!from._internal_meta().empty()) {
    _this->_internal_set_meta(from._internal_meta());
  }
  if (from._internal_has_netinfo()) {
    _this->_internal_mutable_netinfo()->::message::NetInfo::MergeFrom(
        from._internal_netinfo());
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void Login::CopyFrom(const Login& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:message.Login)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Login::IsInitialized() const {
  return true;
}

void Login::InternalSwap(Login* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.uid_, lhs_arena,
      &other->_impl_.uid_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.token_, lhs_arena,
      &other->_impl_.token_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.vender_, lhs_arena,
      &other->_impl_.vender_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.meta_, lhs_arena,
      &other->_impl_.meta_, rhs_arena
  );
  swap(_impl_.netinfo_, other->_impl_.netinfo_);
}

std::string Login::GetTypeName() const {
  return "message.Login";
}


// ===================================================================

class LoginRes::_Internal {
 public:
};

LoginRes::LoginRes(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:message.LoginRes)
}
LoginRes::LoginRes(const LoginRes& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  LoginRes* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.uid_){}
    , decltype(_impl_.public_ip_){}
    , decltype(_impl_.meta_){}
    , decltype(_impl_.res_code_){}
    , decltype(_impl_.gateway_id_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  _impl_.uid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.uid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_uid().empty()) {
    _this->_impl_.uid_.Set(from._internal_uid(), 
      _this->GetArenaForAllocation());
  }
  _impl_.public_ip_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.public_ip_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_public_ip().empty()) {
    _this->_impl_.public_ip_.Set(from._internal_public_ip(), 
      _this->GetArenaForAllocation());
  }
  _impl_.meta_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.meta_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_meta().empty()) {
    _this->_impl_.meta_.Set(from._internal_meta(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.res_code_, &from._impl_.res_code_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.gateway_id_) -
    reinterpret_cast<char*>(&_impl_.res_code_)) + sizeof(_impl_.gateway_id_));
  // @@protoc_insertion_point(copy_constructor:message.LoginRes)
}

inline void LoginRes::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.uid_){}
    , decltype(_impl_.public_ip_){}
    , decltype(_impl_.meta_){}
    , decltype(_impl_.res_code_){0}
    , decltype(_impl_.gateway_id_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.uid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.uid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.public_ip_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.public_ip_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.meta_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.meta_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

LoginRes::~LoginRes() {
  // @@protoc_insertion_point(destructor:message.LoginRes)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void LoginRes::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.uid_.Destroy();
  _impl_.public_ip_.Destroy();
  _impl_.meta_.Destroy();
}

void LoginRes::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void LoginRes::Clear() {
// @@protoc_insertion_point(message_clear_start:message.LoginRes)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.uid_.ClearToEmpty();
  _impl_.public_ip_.ClearToEmpty();
  _impl_.meta_.ClearToEmpty();
  ::memset(&_impl_.res_code_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.gateway_id_) -
      reinterpret_cast<char*>(&_impl_.res_code_)) + sizeof(_impl_.gateway_id_));
  _internal_metadata_.Clear<std::string>();
}

const char* LoginRes::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes uid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_uid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 res_code = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.res_code_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 gateway_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.gateway_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes public_ip = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_public_ip();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes meta = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_meta();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* LoginRes::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:message.LoginRes)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes uid = 1;
  if (!this->_internal_uid().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_uid(), target);
  }

  // int32 res_code = 2;
  if (this->_internal_res_code() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_res_code(), target);
  }

  // int32 gateway_id = 3;
  if (this->_internal_gateway_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_gateway_id(), target);
  }

  // bytes public_ip = 4;
  if (!this->_internal_public_ip().empty()) {
    target = stream->WriteBytesMaybeAliased(
        4, this->_internal_public_ip(), target);
  }

  // bytes meta = 5;
  if (!this->_internal_meta().empty()) {
    target = stream->WriteBytesMaybeAliased(
        5, this->_internal_meta(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:message.LoginRes)
  return target;
}

size_t LoginRes::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:message.LoginRes)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes uid = 1;
  if (!this->_internal_uid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_uid());
  }

  // bytes public_ip = 4;
  if (!this->_internal_public_ip().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_public_ip());
  }

  // bytes meta = 5;
  if (!this->_internal_meta().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_meta());
  }

  // int32 res_code = 2;
  if (this->_internal_res_code() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_res_code());
  }

  // int32 gateway_id = 3;
  if (this->_internal_gateway_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_gateway_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LoginRes::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const LoginRes*>(
      &from));
}

void LoginRes::MergeFrom(const LoginRes& from) {
  LoginRes* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:message.LoginRes)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_uid().empty()) {
    _this->_internal_set_uid(from._internal_uid());
  }
  if (!from._internal_public_ip().empty()) {
    _this->_internal_set_public_ip(from._internal_public_ip());
  }
  if (!from._internal_meta().empty()) {
    _this->_internal_set_meta(from._internal_meta());
  }
  if (from._internal_res_code() != 0) {
    _this->_internal_set_res_code(from._internal_res_code());
  }
  if (from._internal_gateway_id() != 0) {
    _this->_internal_set_gateway_id(from._internal_gateway_id());
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void LoginRes::CopyFrom(const LoginRes& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:message.LoginRes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LoginRes::IsInitialized() const {
  return true;
}

void LoginRes::InternalSwap(LoginRes* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.uid_, lhs_arena,
      &other->_impl_.uid_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.public_ip_, lhs_arena,
      &other->_impl_.public_ip_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.meta_, lhs_arena,
      &other->_impl_.meta_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(LoginRes, _impl_.gateway_id_)
      + sizeof(LoginRes::_impl_.gateway_id_)
      - PROTOBUF_FIELD_OFFSET(LoginRes, _impl_.res_code_)>(
          reinterpret_cast<char*>(&_impl_.res_code_),
          reinterpret_cast<char*>(&other->_impl_.res_code_));
}

std::string LoginRes::GetTypeName() const {
  return "message.LoginRes";
}


// ===================================================================

class CpeNodeChangeNotify::_Internal {
 public:
};

CpeNodeChangeNotify::CpeNodeChangeNotify(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:message.CpeNodeChangeNotify)
}
CpeNodeChangeNotify::CpeNodeChangeNotify(const CpeNodeChangeNotify& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  CpeNodeChangeNotify* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.uid_){}
    , decltype(_impl_.data_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  _impl_.uid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.uid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_uid().empty()) {
    _this->_impl_.uid_.Set(from._internal_uid(), 
      _this->GetArenaForAllocation());
  }
  _impl_.data_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.data_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_data().empty()) {
    _this->_impl_.data_.Set(from._internal_data(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:message.CpeNodeChangeNotify)
}

inline void CpeNodeChangeNotify::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.uid_){}
    , decltype(_impl_.data_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.uid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.uid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.data_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.data_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

CpeNodeChangeNotify::~CpeNodeChangeNotify() {
  // @@protoc_insertion_point(destructor:message.CpeNodeChangeNotify)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CpeNodeChangeNotify::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.uid_.Destroy();
  _impl_.data_.Destroy();
}

void CpeNodeChangeNotify::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CpeNodeChangeNotify::Clear() {
// @@protoc_insertion_point(message_clear_start:message.CpeNodeChangeNotify)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.uid_.ClearToEmpty();
  _impl_.data_.ClearToEmpty();
  _internal_metadata_.Clear<std::string>();
}

const char* CpeNodeChangeNotify::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes uid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_uid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes data = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_data();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CpeNodeChangeNotify::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:message.CpeNodeChangeNotify)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes uid = 1;
  if (!this->_internal_uid().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_uid(), target);
  }

  // bytes data = 2;
  if (!this->_internal_data().empty()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_data(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:message.CpeNodeChangeNotify)
  return target;
}

size_t CpeNodeChangeNotify::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:message.CpeNodeChangeNotify)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes uid = 1;
  if (!this->_internal_uid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_uid());
  }

  // bytes data = 2;
  if (!this->_internal_data().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_data());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CpeNodeChangeNotify::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const CpeNodeChangeNotify*>(
      &from));
}

void CpeNodeChangeNotify::MergeFrom(const CpeNodeChangeNotify& from) {
  CpeNodeChangeNotify* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:message.CpeNodeChangeNotify)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_uid().empty()) {
    _this->_internal_set_uid(from._internal_uid());
  }
  if (!from._internal_data().empty()) {
    _this->_internal_set_data(from._internal_data());
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void CpeNodeChangeNotify::CopyFrom(const CpeNodeChangeNotify& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:message.CpeNodeChangeNotify)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CpeNodeChangeNotify::IsInitialized() const {
  return true;
}

void CpeNodeChangeNotify::InternalSwap(CpeNodeChangeNotify* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.uid_, lhs_arena,
      &other->_impl_.uid_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.data_, lhs_arena,
      &other->_impl_.data_, rhs_arena
  );
}

std::string CpeNodeChangeNotify::GetTypeName() const {
  return "message.CpeNodeChangeNotify";
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace message
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::message::NetInfo*
Arena::CreateMaybeMessage< ::message::NetInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::message::NetInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::message::NodeInfoList*
Arena::CreateMaybeMessage< ::message::NodeInfoList >(Arena* arena) {
  return Arena::CreateMessageInternal< ::message::NodeInfoList >(arena);
}
template<> PROTOBUF_NOINLINE ::message::Login*
Arena::CreateMaybeMessage< ::message::Login >(Arena* arena) {
  return Arena::CreateMessageInternal< ::message::Login >(arena);
}
template<> PROTOBUF_NOINLINE ::message::LoginRes*
Arena::CreateMaybeMessage< ::message::LoginRes >(Arena* arena) {
  return Arena::CreateMessageInternal< ::message::LoginRes >(arena);
}
template<> PROTOBUF_NOINLINE ::message::CpeNodeChangeNotify*
Arena::CreateMaybeMessage< ::message::CpeNodeChangeNotify >(Arena* arena) {
  return Arena::CreateMessageInternal< ::message::CpeNodeChangeNotify >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
