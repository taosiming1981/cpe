// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: keepalive.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_keepalive_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_keepalive_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3020000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3020001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_keepalive_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_keepalive_2eproto {
  static const uint32_t offsets[];
};
namespace message {
class KeepAlive;
struct KeepAliveDefaultTypeInternal;
extern KeepAliveDefaultTypeInternal _KeepAlive_default_instance_;
class KeepAliveRes;
struct KeepAliveResDefaultTypeInternal;
extern KeepAliveResDefaultTypeInternal _KeepAliveRes_default_instance_;
}  // namespace message
PROTOBUF_NAMESPACE_OPEN
template<> ::message::KeepAlive* Arena::CreateMaybeMessage<::message::KeepAlive>(Arena*);
template<> ::message::KeepAliveRes* Arena::CreateMaybeMessage<::message::KeepAliveRes>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace message {

// ===================================================================

class KeepAlive final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:message.KeepAlive) */ {
 public:
  inline KeepAlive() : KeepAlive(nullptr) {}
  ~KeepAlive() override;
  explicit PROTOBUF_CONSTEXPR KeepAlive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  KeepAlive(const KeepAlive& from);
  KeepAlive(KeepAlive&& from) noexcept
    : KeepAlive() {
    *this = ::std::move(from);
  }

  inline KeepAlive& operator=(const KeepAlive& from) {
    CopyFrom(from);
    return *this;
  }
  inline KeepAlive& operator=(KeepAlive&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const KeepAlive& default_instance() {
    return *internal_default_instance();
  }
  static inline const KeepAlive* internal_default_instance() {
    return reinterpret_cast<const KeepAlive*>(
               &_KeepAlive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(KeepAlive& a, KeepAlive& b) {
    a.Swap(&b);
  }
  inline void Swap(KeepAlive* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(KeepAlive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  KeepAlive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<KeepAlive>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const KeepAlive& from);
  void MergeFrom(const KeepAlive& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(KeepAlive* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "message.KeepAlive";
  }
  protected:
  explicit KeepAlive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUidFieldNumber = 1,
    kMetaFieldNumber = 4,
    kSeqFieldNumber = 2,
    kTickFieldNumber = 3,
  };
  // bytes uid = 1;
  void clear_uid();
  const std::string& uid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_uid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_uid();
  PROTOBUF_NODISCARD std::string* release_uid();
  void set_allocated_uid(std::string* uid);
  private:
  const std::string& _internal_uid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_uid(const std::string& value);
  std::string* _internal_mutable_uid();
  public:

  // bytes meta = 4;
  void clear_meta();
  const std::string& meta() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_meta(ArgT0&& arg0, ArgT... args);
  std::string* mutable_meta();
  PROTOBUF_NODISCARD std::string* release_meta();
  void set_allocated_meta(std::string* meta);
  private:
  const std::string& _internal_meta() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_meta(const std::string& value);
  std::string* _internal_mutable_meta();
  public:

  // uint64 seq = 2;
  void clear_seq();
  uint64_t seq() const;
  void set_seq(uint64_t value);
  private:
  uint64_t _internal_seq() const;
  void _internal_set_seq(uint64_t value);
  public:

  // uint64 tick = 3;
  void clear_tick();
  uint64_t tick() const;
  void set_tick(uint64_t value);
  private:
  uint64_t _internal_tick() const;
  void _internal_set_tick(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:message.KeepAlive)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr uid_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr meta_;
    uint64_t seq_;
    uint64_t tick_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_keepalive_2eproto;
};
// -------------------------------------------------------------------

class KeepAliveRes final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:message.KeepAliveRes) */ {
 public:
  inline KeepAliveRes() : KeepAliveRes(nullptr) {}
  ~KeepAliveRes() override;
  explicit PROTOBUF_CONSTEXPR KeepAliveRes(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  KeepAliveRes(const KeepAliveRes& from);
  KeepAliveRes(KeepAliveRes&& from) noexcept
    : KeepAliveRes() {
    *this = ::std::move(from);
  }

  inline KeepAliveRes& operator=(const KeepAliveRes& from) {
    CopyFrom(from);
    return *this;
  }
  inline KeepAliveRes& operator=(KeepAliveRes&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const KeepAliveRes& default_instance() {
    return *internal_default_instance();
  }
  static inline const KeepAliveRes* internal_default_instance() {
    return reinterpret_cast<const KeepAliveRes*>(
               &_KeepAliveRes_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(KeepAliveRes& a, KeepAliveRes& b) {
    a.Swap(&b);
  }
  inline void Swap(KeepAliveRes* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(KeepAliveRes* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  KeepAliveRes* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<KeepAliveRes>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const KeepAliveRes& from);
  void MergeFrom(const KeepAliveRes& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(KeepAliveRes* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "message.KeepAliveRes";
  }
  protected:
  explicit KeepAliveRes(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUidFieldNumber = 1,
    kMetaFieldNumber = 5,
    kSeqFieldNumber = 3,
    kTickFieldNumber = 4,
    kResCodeFieldNumber = 2,
  };
  // bytes uid = 1;
  void clear_uid();
  const std::string& uid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_uid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_uid();
  PROTOBUF_NODISCARD std::string* release_uid();
  void set_allocated_uid(std::string* uid);
  private:
  const std::string& _internal_uid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_uid(const std::string& value);
  std::string* _internal_mutable_uid();
  public:

  // bytes meta = 5;
  void clear_meta();
  const std::string& meta() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_meta(ArgT0&& arg0, ArgT... args);
  std::string* mutable_meta();
  PROTOBUF_NODISCARD std::string* release_meta();
  void set_allocated_meta(std::string* meta);
  private:
  const std::string& _internal_meta() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_meta(const std::string& value);
  std::string* _internal_mutable_meta();
  public:

  // uint64 seq = 3;
  void clear_seq();
  uint64_t seq() const;
  void set_seq(uint64_t value);
  private:
  uint64_t _internal_seq() const;
  void _internal_set_seq(uint64_t value);
  public:

  // uint64 tick = 4;
  void clear_tick();
  uint64_t tick() const;
  void set_tick(uint64_t value);
  private:
  uint64_t _internal_tick() const;
  void _internal_set_tick(uint64_t value);
  public:

  // uint32 res_code = 2;
  void clear_res_code();
  uint32_t res_code() const;
  void set_res_code(uint32_t value);
  private:
  uint32_t _internal_res_code() const;
  void _internal_set_res_code(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:message.KeepAliveRes)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr uid_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr meta_;
    uint64_t seq_;
    uint64_t tick_;
    uint32_t res_code_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_keepalive_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// KeepAlive

// bytes uid = 1;
inline void KeepAlive::clear_uid() {
  _impl_.uid_.ClearToEmpty();
}
inline const std::string& KeepAlive::uid() const {
  // @@protoc_insertion_point(field_get:message.KeepAlive.uid)
  return _internal_uid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void KeepAlive::set_uid(ArgT0&& arg0, ArgT... args) {
 
 _impl_.uid_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:message.KeepAlive.uid)
}
inline std::string* KeepAlive::mutable_uid() {
  std::string* _s = _internal_mutable_uid();
  // @@protoc_insertion_point(field_mutable:message.KeepAlive.uid)
  return _s;
}
inline const std::string& KeepAlive::_internal_uid() const {
  return _impl_.uid_.Get();
}
inline void KeepAlive::_internal_set_uid(const std::string& value) {
  
  _impl_.uid_.Set(value, GetArenaForAllocation());
}
inline std::string* KeepAlive::_internal_mutable_uid() {
  
  return _impl_.uid_.Mutable(GetArenaForAllocation());
}
inline std::string* KeepAlive::release_uid() {
  // @@protoc_insertion_point(field_release:message.KeepAlive.uid)
  return _impl_.uid_.Release();
}
inline void KeepAlive::set_allocated_uid(std::string* uid) {
  if (uid != nullptr) {
    
  } else {
    
  }
  _impl_.uid_.SetAllocated(uid, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.uid_.IsDefault()) {
    _impl_.uid_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:message.KeepAlive.uid)
}

// uint64 seq = 2;
inline void KeepAlive::clear_seq() {
  _impl_.seq_ = uint64_t{0u};
}
inline uint64_t KeepAlive::_internal_seq() const {
  return _impl_.seq_;
}
inline uint64_t KeepAlive::seq() const {
  // @@protoc_insertion_point(field_get:message.KeepAlive.seq)
  return _internal_seq();
}
inline void KeepAlive::_internal_set_seq(uint64_t value) {
  
  _impl_.seq_ = value;
}
inline void KeepAlive::set_seq(uint64_t value) {
  _internal_set_seq(value);
  // @@protoc_insertion_point(field_set:message.KeepAlive.seq)
}

// uint64 tick = 3;
inline void KeepAlive::clear_tick() {
  _impl_.tick_ = uint64_t{0u};
}
inline uint64_t KeepAlive::_internal_tick() const {
  return _impl_.tick_;
}
inline uint64_t KeepAlive::tick() const {
  // @@protoc_insertion_point(field_get:message.KeepAlive.tick)
  return _internal_tick();
}
inline void KeepAlive::_internal_set_tick(uint64_t value) {
  
  _impl_.tick_ = value;
}
inline void KeepAlive::set_tick(uint64_t value) {
  _internal_set_tick(value);
  // @@protoc_insertion_point(field_set:message.KeepAlive.tick)
}

// bytes meta = 4;
inline void KeepAlive::clear_meta() {
  _impl_.meta_.ClearToEmpty();
}
inline const std::string& KeepAlive::meta() const {
  // @@protoc_insertion_point(field_get:message.KeepAlive.meta)
  return _internal_meta();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void KeepAlive::set_meta(ArgT0&& arg0, ArgT... args) {
 
 _impl_.meta_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:message.KeepAlive.meta)
}
inline std::string* KeepAlive::mutable_meta() {
  std::string* _s = _internal_mutable_meta();
  // @@protoc_insertion_point(field_mutable:message.KeepAlive.meta)
  return _s;
}
inline const std::string& KeepAlive::_internal_meta() const {
  return _impl_.meta_.Get();
}
inline void KeepAlive::_internal_set_meta(const std::string& value) {
  
  _impl_.meta_.Set(value, GetArenaForAllocation());
}
inline std::string* KeepAlive::_internal_mutable_meta() {
  
  return _impl_.meta_.Mutable(GetArenaForAllocation());
}
inline std::string* KeepAlive::release_meta() {
  // @@protoc_insertion_point(field_release:message.KeepAlive.meta)
  return _impl_.meta_.Release();
}
inline void KeepAlive::set_allocated_meta(std::string* meta) {
  if (meta != nullptr) {
    
  } else {
    
  }
  _impl_.meta_.SetAllocated(meta, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.meta_.IsDefault()) {
    _impl_.meta_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:message.KeepAlive.meta)
}

// -------------------------------------------------------------------

// KeepAliveRes

// bytes uid = 1;
inline void KeepAliveRes::clear_uid() {
  _impl_.uid_.ClearToEmpty();
}
inline const std::string& KeepAliveRes::uid() const {
  // @@protoc_insertion_point(field_get:message.KeepAliveRes.uid)
  return _internal_uid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void KeepAliveRes::set_uid(ArgT0&& arg0, ArgT... args) {
 
 _impl_.uid_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:message.KeepAliveRes.uid)
}
inline std::string* KeepAliveRes::mutable_uid() {
  std::string* _s = _internal_mutable_uid();
  // @@protoc_insertion_point(field_mutable:message.KeepAliveRes.uid)
  return _s;
}
inline const std::string& KeepAliveRes::_internal_uid() const {
  return _impl_.uid_.Get();
}
inline void KeepAliveRes::_internal_set_uid(const std::string& value) {
  
  _impl_.uid_.Set(value, GetArenaForAllocation());
}
inline std::string* KeepAliveRes::_internal_mutable_uid() {
  
  return _impl_.uid_.Mutable(GetArenaForAllocation());
}
inline std::string* KeepAliveRes::release_uid() {
  // @@protoc_insertion_point(field_release:message.KeepAliveRes.uid)
  return _impl_.uid_.Release();
}
inline void KeepAliveRes::set_allocated_uid(std::string* uid) {
  if (uid != nullptr) {
    
  } else {
    
  }
  _impl_.uid_.SetAllocated(uid, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.uid_.IsDefault()) {
    _impl_.uid_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:message.KeepAliveRes.uid)
}

// uint32 res_code = 2;
inline void KeepAliveRes::clear_res_code() {
  _impl_.res_code_ = 0u;
}
inline uint32_t KeepAliveRes::_internal_res_code() const {
  return _impl_.res_code_;
}
inline uint32_t KeepAliveRes::res_code() const {
  // @@protoc_insertion_point(field_get:message.KeepAliveRes.res_code)
  return _internal_res_code();
}
inline void KeepAliveRes::_internal_set_res_code(uint32_t value) {
  
  _impl_.res_code_ = value;
}
inline void KeepAliveRes::set_res_code(uint32_t value) {
  _internal_set_res_code(value);
  // @@protoc_insertion_point(field_set:message.KeepAliveRes.res_code)
}

// uint64 seq = 3;
inline void KeepAliveRes::clear_seq() {
  _impl_.seq_ = uint64_t{0u};
}
inline uint64_t KeepAliveRes::_internal_seq() const {
  return _impl_.seq_;
}
inline uint64_t KeepAliveRes::seq() const {
  // @@protoc_insertion_point(field_get:message.KeepAliveRes.seq)
  return _internal_seq();
}
inline void KeepAliveRes::_internal_set_seq(uint64_t value) {
  
  _impl_.seq_ = value;
}
inline void KeepAliveRes::set_seq(uint64_t value) {
  _internal_set_seq(value);
  // @@protoc_insertion_point(field_set:message.KeepAliveRes.seq)
}

// uint64 tick = 4;
inline void KeepAliveRes::clear_tick() {
  _impl_.tick_ = uint64_t{0u};
}
inline uint64_t KeepAliveRes::_internal_tick() const {
  return _impl_.tick_;
}
inline uint64_t KeepAliveRes::tick() const {
  // @@protoc_insertion_point(field_get:message.KeepAliveRes.tick)
  return _internal_tick();
}
inline void KeepAliveRes::_internal_set_tick(uint64_t value) {
  
  _impl_.tick_ = value;
}
inline void KeepAliveRes::set_tick(uint64_t value) {
  _internal_set_tick(value);
  // @@protoc_insertion_point(field_set:message.KeepAliveRes.tick)
}

// bytes meta = 5;
inline void KeepAliveRes::clear_meta() {
  _impl_.meta_.ClearToEmpty();
}
inline const std::string& KeepAliveRes::meta() const {
  // @@protoc_insertion_point(field_get:message.KeepAliveRes.meta)
  return _internal_meta();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void KeepAliveRes::set_meta(ArgT0&& arg0, ArgT... args) {
 
 _impl_.meta_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:message.KeepAliveRes.meta)
}
inline std::string* KeepAliveRes::mutable_meta() {
  std::string* _s = _internal_mutable_meta();
  // @@protoc_insertion_point(field_mutable:message.KeepAliveRes.meta)
  return _s;
}
inline const std::string& KeepAliveRes::_internal_meta() const {
  return _impl_.meta_.Get();
}
inline void KeepAliveRes::_internal_set_meta(const std::string& value) {
  
  _impl_.meta_.Set(value, GetArenaForAllocation());
}
inline std::string* KeepAliveRes::_internal_mutable_meta() {
  
  return _impl_.meta_.Mutable(GetArenaForAllocation());
}
inline std::string* KeepAliveRes::release_meta() {
  // @@protoc_insertion_point(field_release:message.KeepAliveRes.meta)
  return _impl_.meta_.Release();
}
inline void KeepAliveRes::set_allocated_meta(std::string* meta) {
  if (meta != nullptr) {
    
  } else {
    
  }
  _impl_.meta_.SetAllocated(meta, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.meta_.IsDefault()) {
    _impl_.meta_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:message.KeepAliveRes.meta)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace message

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_keepalive_2eproto
