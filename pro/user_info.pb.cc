// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: user_info.proto

#include "user_info.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace message {
PROTOBUF_CONSTEXPR CustemorInfo::CustemorInfo(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.cpe_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.cpe_ip_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.cpe_vender_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CustemorInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CustemorInfoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CustemorInfoDefaultTypeInternal() {}
  union {
    CustemorInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CustemorInfoDefaultTypeInternal _CustemorInfo_default_instance_;
PROTOBUF_CONSTEXPR CustemorPEList::CustemorPEList(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.cpe_list_)*/{}
  , /*decltype(_impl_.edge_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.edge_ip_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.edge_port_)*/0
  , /*decltype(_impl_.edge_group_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CustemorPEListDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CustemorPEListDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CustemorPEListDefaultTypeInternal() {}
  union {
    CustemorPEList _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CustemorPEListDefaultTypeInternal _CustemorPEList_default_instance_;
PROTOBUF_CONSTEXPR UserListOnEdge::UserListOnEdge(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.edge_list_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct UserListOnEdgeDefaultTypeInternal {
  PROTOBUF_CONSTEXPR UserListOnEdgeDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~UserListOnEdgeDefaultTypeInternal() {}
  union {
    UserListOnEdge _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 UserListOnEdgeDefaultTypeInternal _UserListOnEdge_default_instance_;
}  // namespace message
namespace message {

// ===================================================================

class CustemorInfo::_Internal {
 public:
};

CustemorInfo::CustemorInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:message.CustemorInfo)
}
CustemorInfo::CustemorInfo(const CustemorInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  CustemorInfo* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.cpe_id_){}
    , decltype(_impl_.cpe_ip_){}
    , decltype(_impl_.cpe_vender_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  _impl_.cpe_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.cpe_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_cpe_id().empty()) {
    _this->_impl_.cpe_id_.Set(from._internal_cpe_id(), 
      _this->GetArenaForAllocation());
  }
  _impl_.cpe_ip_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.cpe_ip_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_cpe_ip().empty()) {
    _this->_impl_.cpe_ip_.Set(from._internal_cpe_ip(), 
      _this->GetArenaForAllocation());
  }
  _impl_.cpe_vender_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.cpe_vender_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_cpe_vender().empty()) {
    _this->_impl_.cpe_vender_.Set(from._internal_cpe_vender(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:message.CustemorInfo)
}

inline void CustemorInfo::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.cpe_id_){}
    , decltype(_impl_.cpe_ip_){}
    , decltype(_impl_.cpe_vender_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.cpe_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.cpe_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.cpe_ip_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.cpe_ip_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.cpe_vender_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.cpe_vender_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

CustemorInfo::~CustemorInfo() {
  // @@protoc_insertion_point(destructor:message.CustemorInfo)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CustemorInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.cpe_id_.Destroy();
  _impl_.cpe_ip_.Destroy();
  _impl_.cpe_vender_.Destroy();
}

void CustemorInfo::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CustemorInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:message.CustemorInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.cpe_id_.ClearToEmpty();
  _impl_.cpe_ip_.ClearToEmpty();
  _impl_.cpe_vender_.ClearToEmpty();
  _internal_metadata_.Clear<std::string>();
}

const char* CustemorInfo::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes cpe_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_cpe_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes cpe_ip = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_cpe_ip();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes cpe_vender = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_cpe_vender();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CustemorInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:message.CustemorInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes cpe_id = 1;
  if (!this->_internal_cpe_id().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_cpe_id(), target);
  }

  // bytes cpe_ip = 2;
  if (!this->_internal_cpe_ip().empty()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_cpe_ip(), target);
  }

  // bytes cpe_vender = 3;
  if (!this->_internal_cpe_vender().empty()) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_cpe_vender(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:message.CustemorInfo)
  return target;
}

size_t CustemorInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:message.CustemorInfo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes cpe_id = 1;
  if (!this->_internal_cpe_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_cpe_id());
  }

  // bytes cpe_ip = 2;
  if (!this->_internal_cpe_ip().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_cpe_ip());
  }

  // bytes cpe_vender = 3;
  if (!this->_internal_cpe_vender().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_cpe_vender());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CustemorInfo::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const CustemorInfo*>(
      &from));
}

void CustemorInfo::MergeFrom(const CustemorInfo& from) {
  CustemorInfo* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:message.CustemorInfo)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_cpe_id().empty()) {
    _this->_internal_set_cpe_id(from._internal_cpe_id());
  }
  if (!from._internal_cpe_ip().empty()) {
    _this->_internal_set_cpe_ip(from._internal_cpe_ip());
  }
  if (!from._internal_cpe_vender().empty()) {
    _this->_internal_set_cpe_vender(from._internal_cpe_vender());
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void CustemorInfo::CopyFrom(const CustemorInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:message.CustemorInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CustemorInfo::IsInitialized() const {
  return true;
}

void CustemorInfo::InternalSwap(CustemorInfo* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.cpe_id_, lhs_arena,
      &other->_impl_.cpe_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.cpe_ip_, lhs_arena,
      &other->_impl_.cpe_ip_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.cpe_vender_, lhs_arena,
      &other->_impl_.cpe_vender_, rhs_arena
  );
}

std::string CustemorInfo::GetTypeName() const {
  return "message.CustemorInfo";
}


// ===================================================================

class CustemorPEList::_Internal {
 public:
};

CustemorPEList::CustemorPEList(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:message.CustemorPEList)
}
CustemorPEList::CustemorPEList(const CustemorPEList& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  CustemorPEList* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.cpe_list_){from._impl_.cpe_list_}
    , decltype(_impl_.edge_id_){}
    , decltype(_impl_.edge_ip_){}
    , decltype(_impl_.edge_port_){}
    , decltype(_impl_.edge_group_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  _impl_.edge_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.edge_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_edge_id().empty()) {
    _this->_impl_.edge_id_.Set(from._internal_edge_id(), 
      _this->GetArenaForAllocation());
  }
  _impl_.edge_ip_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.edge_ip_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_edge_ip().empty()) {
    _this->_impl_.edge_ip_.Set(from._internal_edge_ip(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.edge_port_, &from._impl_.edge_port_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.edge_group_) -
    reinterpret_cast<char*>(&_impl_.edge_port_)) + sizeof(_impl_.edge_group_));
  // @@protoc_insertion_point(copy_constructor:message.CustemorPEList)
}

inline void CustemorPEList::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.cpe_list_){arena}
    , decltype(_impl_.edge_id_){}
    , decltype(_impl_.edge_ip_){}
    , decltype(_impl_.edge_port_){0}
    , decltype(_impl_.edge_group_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.edge_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.edge_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.edge_ip_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.edge_ip_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

CustemorPEList::~CustemorPEList() {
  // @@protoc_insertion_point(destructor:message.CustemorPEList)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CustemorPEList::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.cpe_list_.~RepeatedPtrField();
  _impl_.edge_id_.Destroy();
  _impl_.edge_ip_.Destroy();
}

void CustemorPEList::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CustemorPEList::Clear() {
// @@protoc_insertion_point(message_clear_start:message.CustemorPEList)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.cpe_list_.Clear();
  _impl_.edge_id_.ClearToEmpty();
  _impl_.edge_ip_.ClearToEmpty();
  ::memset(&_impl_.edge_port_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.edge_group_) -
      reinterpret_cast<char*>(&_impl_.edge_port_)) + sizeof(_impl_.edge_group_));
  _internal_metadata_.Clear<std::string>();
}

const char* CustemorPEList::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes edge_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_edge_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes edge_ip = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_edge_ip();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 edge_port = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.edge_port_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 edge_group = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.edge_group_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .message.CustemorInfo cpe_list = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_cpe_list(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CustemorPEList::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:message.CustemorPEList)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes edge_id = 1;
  if (!this->_internal_edge_id().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_edge_id(), target);
  }

  // bytes edge_ip = 2;
  if (!this->_internal_edge_ip().empty()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_edge_ip(), target);
  }

  // int32 edge_port = 3;
  if (this->_internal_edge_port() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_edge_port(), target);
  }

  // int32 edge_group = 4;
  if (this->_internal_edge_group() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(4, this->_internal_edge_group(), target);
  }

  // repeated .message.CustemorInfo cpe_list = 5;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_cpe_list_size()); i < n; i++) {
    const auto& repfield = this->_internal_cpe_list(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(5, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:message.CustemorPEList)
  return target;
}

size_t CustemorPEList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:message.CustemorPEList)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .message.CustemorInfo cpe_list = 5;
  total_size += 1UL * this->_internal_cpe_list_size();
  for (const auto& msg : this->_impl_.cpe_list_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // bytes edge_id = 1;
  if (!this->_internal_edge_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_edge_id());
  }

  // bytes edge_ip = 2;
  if (!this->_internal_edge_ip().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_edge_ip());
  }

  // int32 edge_port = 3;
  if (this->_internal_edge_port() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_edge_port());
  }

  // int32 edge_group = 4;
  if (this->_internal_edge_group() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_edge_group());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CustemorPEList::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const CustemorPEList*>(
      &from));
}

void CustemorPEList::MergeFrom(const CustemorPEList& from) {
  CustemorPEList* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:message.CustemorPEList)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.cpe_list_.MergeFrom(from._impl_.cpe_list_);
  if (!from._internal_edge_id().empty()) {
    _this->_internal_set_edge_id(from._internal_edge_id());
  }
  if (!from._internal_edge_ip().empty()) {
    _this->_internal_set_edge_ip(from._internal_edge_ip());
  }
  if (from._internal_edge_port() != 0) {
    _this->_internal_set_edge_port(from._internal_edge_port());
  }
  if (from._internal_edge_group() != 0) {
    _this->_internal_set_edge_group(from._internal_edge_group());
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void CustemorPEList::CopyFrom(const CustemorPEList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:message.CustemorPEList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CustemorPEList::IsInitialized() const {
  return true;
}

void CustemorPEList::InternalSwap(CustemorPEList* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.cpe_list_.InternalSwap(&other->_impl_.cpe_list_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.edge_id_, lhs_arena,
      &other->_impl_.edge_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.edge_ip_, lhs_arena,
      &other->_impl_.edge_ip_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CustemorPEList, _impl_.edge_group_)
      + sizeof(CustemorPEList::_impl_.edge_group_)
      - PROTOBUF_FIELD_OFFSET(CustemorPEList, _impl_.edge_port_)>(
          reinterpret_cast<char*>(&_impl_.edge_port_),
          reinterpret_cast<char*>(&other->_impl_.edge_port_));
}

std::string CustemorPEList::GetTypeName() const {
  return "message.CustemorPEList";
}


// ===================================================================

class UserListOnEdge::_Internal {
 public:
};

UserListOnEdge::UserListOnEdge(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:message.UserListOnEdge)
}
UserListOnEdge::UserListOnEdge(const UserListOnEdge& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  UserListOnEdge* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.edge_list_){from._impl_.edge_list_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:message.UserListOnEdge)
}

inline void UserListOnEdge::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.edge_list_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

UserListOnEdge::~UserListOnEdge() {
  // @@protoc_insertion_point(destructor:message.UserListOnEdge)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void UserListOnEdge::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.edge_list_.~RepeatedPtrField();
}

void UserListOnEdge::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void UserListOnEdge::Clear() {
// @@protoc_insertion_point(message_clear_start:message.UserListOnEdge)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.edge_list_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* UserListOnEdge::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .message.CustemorPEList edge_list = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_edge_list(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* UserListOnEdge::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:message.UserListOnEdge)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .message.CustemorPEList edge_list = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_edge_list_size()); i < n; i++) {
    const auto& repfield = this->_internal_edge_list(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:message.UserListOnEdge)
  return target;
}

size_t UserListOnEdge::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:message.UserListOnEdge)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .message.CustemorPEList edge_list = 1;
  total_size += 1UL * this->_internal_edge_list_size();
  for (const auto& msg : this->_impl_.edge_list_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UserListOnEdge::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const UserListOnEdge*>(
      &from));
}

void UserListOnEdge::MergeFrom(const UserListOnEdge& from) {
  UserListOnEdge* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:message.UserListOnEdge)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.edge_list_.MergeFrom(from._impl_.edge_list_);
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void UserListOnEdge::CopyFrom(const UserListOnEdge& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:message.UserListOnEdge)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserListOnEdge::IsInitialized() const {
  return true;
}

void UserListOnEdge::InternalSwap(UserListOnEdge* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.edge_list_.InternalSwap(&other->_impl_.edge_list_);
}

std::string UserListOnEdge::GetTypeName() const {
  return "message.UserListOnEdge";
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace message
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::message::CustemorInfo*
Arena::CreateMaybeMessage< ::message::CustemorInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::message::CustemorInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::message::CustemorPEList*
Arena::CreateMaybeMessage< ::message::CustemorPEList >(Arena* arena) {
  return Arena::CreateMessageInternal< ::message::CustemorPEList >(arena);
}
template<> PROTOBUF_NOINLINE ::message::UserListOnEdge*
Arena::CreateMaybeMessage< ::message::UserListOnEdge >(Arena* arena) {
  return Arena::CreateMessageInternal< ::message::UserListOnEdge >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
